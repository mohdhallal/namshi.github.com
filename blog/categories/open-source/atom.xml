<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: open source | Tech @ Namshi.com]]></title>
  <link href="http://namshi.github.io/blog/categories/open-source/atom.xml" rel="self"/>
  <link href="http://namshi.github.io/"/>
  <updated>2014-10-30T09:16:49+04:00</updated>
  <id>http://namshi.github.io/</id>
  <author>
    <name><![CDATA[Namshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[winston-graylog2: a new life under Namshi]]></title>
    <link href="http://namshi.github.io/blog/2014/10/27/winston-graylog2-a-new-life-under-namshi/"/>
    <updated>2014-10-27T10:32:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/10/27/winston-graylog2-a-new-life-under-namshi</id>
    <content type="html"><![CDATA[<p>As our herd of node.js apps grows, we soon needed a way to keep an eye on them.
Having already in out tool belt a <a href="http://www.graylog2.org/">graylog2</a> facility in place, looking for a way to leverage it was the most natural thing to do.</p>

<p>Because of its nice modular <code>transports feature</code> our node-logging weapon of choice is <a href="https://github.com/flatiron/winston">winston</a>, the <code>graylog2</code> transport library looked a bit alone though and in need of a maintainer.
I our usual <strong>give back</strong> spirit we choose to adopt the lib instead of publishing a new one, and today we merged our 1st PR! :)</p>

<p>As for now our intervention was isolated to move away from the custom GELF protocol implementation, relying instead on the <a href="https://github.com/Wizcorp/node-graylog2">node-graylog2</a> library:
they&rsquo;ll most likely do a better job than us on the protocol side, and we&rsquo;ll be able to focus more on the winston integration.
We also started introducing some basic tests: definitely some better work can be done on this side ;)</p>

<p>So here it is: <a href="https://github.com/namshi/winston-graylog2">winston-graylog2</a>
and here&rsquo;s briefly how you use it:</p>

<p>the usual
<code>bash
npm install winston-graylog2
</code>
and then</p>

<p>```javascript
  var winston = require(&lsquo;winston&rsquo;);
  winston.add(require(&lsquo;winston-graylog2&rsquo;), options);</p>

<p>```</p>

<p>or</p>

<p>```javascript
var WinstonGraylog2 = require(&lsquo;winston-graylog2&rsquo;);
var logger = new(winston.Logger)({</p>

<pre><code>    exitOnError: false,
    transports: [new(WinstonGraylog2)(options)]
  });
</code></pre>

<p>```</p>

<p>Enjoy! :)</p>

<p>Publishing something new is always a great feeling, and it&rsquo;s even more fulfilling when it involves not letting a project die :)<br> So let us know if you like it and share the love with some RP!!!! ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ClusterJS, clusterify your NodeJS applications and achieve zero-downtime deployments]]></title>
    <link href="http://namshi.github.io/blog/2014/06/27/clusterjs-clusterify-your-nodejs-applications-and-achieve-zero-downtime-deployments/"/>
    <updated>2014-06-27T00:45:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/06/27/clusterjs-clusterify-your-nodejs-applications-and-achieve-zero-downtime-deployments</id>
    <content type="html"><![CDATA[<p>NodeJS has a very nice built-in support for clusters
through its native <a href="http://nodejs.org/api/cluster.html">cluster module</a>:
by using it and realizing we wanted to achieve zero-downtime
deployments (ZDD) on our node apps we decided to kick in.</p>

<!-- more -->


<p>This afternoon <a href="/team#Luciano%20Colosio">Lucio</a> came up to me
and asked me a simple question:</p>

<blockquote><p>Let&rsquo;s do some NodeJS today?</p></blockquote>

<p>and my answer was clear and simple: we need a robust solution
for ZDD, let&rsquo;s do this.</p>

<p>Before jumping with our usual <code>git init</code> and <code>npm init</code>
we searched a bit and found a few alternatives, which
weren&rsquo;t exactly fitting our scenarios:</p>

<ul>
<li><a href="http://learnboost.github.io/cluster/">learnboost/cluster</a>, which is
quite old, discontinued and hasn&rsquo;t been updated in a couple of years</li>
<li><a href="https://github.com/isaacs/cluster-master">isaacs/cluster-master</a>, which
seems to have a whole lot of great things but we wanted to have
the startup script as a global command rather than having to write
a script on our own (but we might wrap it, as it
has a lot of cool features, like resizing your cluster)</li>
</ul>


<p>At the end we decided to go for a simple solution after reading
<a href="http://jaxbot.me/articles/zero_downtime_nodejs_reloads_with_clusters_7_5_2013">this post from Jax</a>
that explains how to achieve ZDD on NodeJS.</p>

<p>In a few, very productive hours, Lucio was able to write
<a href="https://www.npmjs.org/package/clusterjs">ClusterJS</a> and
we decided to release it to the public, as it might
be interesting out there (and because we really like
to receive feedbacks!).</p>

<p>Suppose you have a typical <a href="http://expressjs.com/">ExpressJS</a>
app that runs through an <code>app.js</code> script, in order to run it through
ClusterJS you simply have to:</p>

<p>```
npm install -g clusterjs</p>

<p>clusterjs path/to/app.js
```</p>

<p>At this point you should be able to see something like this:</p>

<p>```
~/projects/clusterjs (master ✔) ᐅ clusterjs test/testApp/app.js</p>

<p>Booting a cluster of ./test/testApp/app.js
We are gonna be launching 4 workers
The cluster will reload on: SIGUSR2
&mdash;&ndash; test app loaded as pid: 21543
&mdash;&ndash; test app loaded as pid: 21544
&mdash;&ndash; test app loaded as pid: 21546
&mdash;&ndash; test app loaded as pid: 21547
Worker 1 running!
Worker 2 running!
Worker 3 running!
Worker 4 running!
```</p>

<p>Cool! You have just put your app in a cluster with four workers!</p>

<p>By default, ClusterJS will boot as many workers as CPUs
in your system; if you wanna change it, simply:</p>

<p>```
~/projects/clusterjs (master ✔) ᐅ clusterjs test/testApp/app.js &mdash;workers 10</p>

<p>Booting a cluster of ./test/testApp/app.js
We are gonna be launching 10 workers
The cluster will reload on: SIGUSR2
&mdash;&ndash; test app loaded as pid: 21636
&mdash;&ndash; test app loaded as pid: 21635
Worker 2 running!
Worker 1 running!
&mdash;&ndash; test app loaded as pid: 21650
&mdash;&ndash; test app loaded as pid: 21640
Worker 9 running!
&mdash;&ndash; test app loaded as pid: 21639
&mdash;&ndash; test app loaded as pid: 21641
Worker 4 running!
&mdash;&ndash; test app loaded as pid: 21644
Worker 5 running!
Worker 3 running!
Worker 6 running!
&mdash;&ndash; test app loaded as pid: 21648
&mdash;&ndash; test app loaded as pid: 21646
Worker 8 running!
&mdash;&ndash; test app loaded as pid: 21652
Worker 7 running!
Worker 10 running!
```</p>

<p>How to achieve ZDD? Simply issue a SIGUSR2 command
to your master process, after updating the files
in your app:</p>

<p>```
~/projects/clusterjs (master ✔) ᐅ clusterjs test/testApp/app.js &mdash;workers 2
Booting a cluster of ./test/testApp/app.js
We are gonna be launching 2 workers
The cluster will reload on: SIGUSR2
&mdash;&ndash; test app loaded as pid: 22007
&mdash;&ndash; test app loaded as pid: 22008
Worker 1 running!
Worker 2 running!</p>

<p>SIGUSR2 received, reloading the app
<strong><em> reloading workers!
restarting worker: 1
Shutdown complete for worker 1
Worker 1 died :(
&mdash;&ndash; test app loaded as pid: 22018
&mdash;&ndash; test app loaded as pid: 22021
Worker 3 running!
Worker 4 running!
Replacement worker online.
</em></strong> reloading workers!
restarting worker: 2
Shutdown complete for worker 2
Worker 2 died :(
&mdash;&ndash; test app loaded as pid: 22055
&mdash;&ndash; test app loaded as pid: 22056
Worker 5 running!
Worker 6 running!
Replacement worker online.
```</p>

<p>If you want to change the signal used to reload the cluster,
you can do it with a simple option:</p>

<p><code>
clusterjs test/testApp/app.js --workers 2 --reloadon SIGUSR1
</code></p>

<p>That&rsquo;s (basically) it! Kudos to Lucio for his work and&hellip;</p>

<p>&hellip;if you wanna play with ClusterJS or suggest any improvement,
feel free to have a look around, as
<a href="https://github.com/namshi/clusterjs">ClusterJS is on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Where in the world is Carmen San Diego?]]></title>
    <link href="http://namshi.github.io/blog/2014/06/24/where-in-the-world-is-carmen-san-diego/"/>
    <updated>2014-06-24T23:20:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/06/24/where-in-the-world-is-carmen-san-diego</id>
    <content type="html"><![CDATA[<p>The team at Namshi is always on the go with some new open source project
that lights up our weekends or solves some of the small dilemmas we daily
face at work.</p>

<!-- more -->


<p>In the past days <a href="http://tech.namshi.com/team/#Luciano%20Colosio">Lucio</a>
has been working on one of his side projects and released
<a href="https://github.com/unlucio/carmensandiego">CarmenSandiego</a> on Github:
it lets you visualize your 4Square checkins on a map
<a href="https://github.com/unlucio/carmensandiego#so-heres-how-you-do-it">in a matter of a few steps</a>,
and it has been written in his beloved NodeJS.</p>

<p>Kudos to Lucio for releasing his work and&hellip;   &hellip;more to come!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reconfig: declarative JavaScript configurations]]></title>
    <link href="http://namshi.github.io/blog/2014/06/07/reconfi-declarative-javascript-configurations/"/>
    <updated>2014-06-07T00:50:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/06/07/reconfi-declarative-javascript-configurations</id>
    <content type="html"><![CDATA[<p>We recently published a new library that let&rsquo;s you
deal with configurations, in JavaScript, in a very
elegant way.</p>

<p>The library is called <a href="https://github.com/namshi/reconfig">Reconfig</a> and it&rsquo;s available
through <a href="https://www.npmjs.org/package/reconfig">NPM</a> (if you need on the browser we highly
recommend <a href="http://browserify.org/">browserify</a>): it&rsquo;s really
small and simple, and thought to keep your
configuration as elegant, simple and declarative as possible.</p>

<!-- more -->


<p>With reconfig you can do stuff like:</p>

<p>{% codeblock lang:javascript %}
{% raw %}
var reconfig = require(&lsquo;reconfig&rsquo;);</p>

<p>var config =  new reconfig({</p>

<pre><code>greet: 'Hello :who!',
sayhi: '{{ greet }}'
countries: {
    uae: {
        population: '2M',
        nationalDay: 'December 2nd'
    }
    // ...
}
</code></pre>

<p>});</p>

<p>// Retrieve a deep config value
config.get(&lsquo;countries.uae.nationalDay&rsquo;); // December, 2nd</p>

<p>// Pass parameters to the configuration
config.get(&lsquo;greet&rsquo;, {who: &lsquo;John&rsquo;}); // Hello, John!</p>

<p>// Reference other configuration parameters
config.get(&lsquo;sayhi&rsquo;, {who: &lsquo;John&rsquo;}); // Hello, John!</p>

<p>// Fallback values
config.get(&lsquo;something&rsquo;, {}, &lsquo;invalid&rsquo;); // invalid
{% endraw %}
{% endcodeblock %}</p>

<p>We&rsquo;re probably gonna look into porting the same to
PHP (another big player in our stack) so&hellip;stay tuned!</p>
]]></content>
  </entry>
  
</feed>
