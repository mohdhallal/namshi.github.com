<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Tech @ Namshi.com]]></title>
  <link href="http://namshi.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://namshi.github.io/"/>
  <updated>2014-10-30T15:46:54+04:00</updated>
  <id>http://namshi.github.io/</id>
  <author>
    <name><![CDATA[Namshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[winston-graylog2: a new life under Namshi]]></title>
    <link href="http://namshi.github.io/blog/2014/10/27/winston-graylog2-a-new-life-under-namshi/"/>
    <updated>2014-10-27T10:32:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/10/27/winston-graylog2-a-new-life-under-namshi</id>
    <content type="html"><![CDATA[<p>As our herd of node.js apps grows, we soon needed a way to keep an eye on them.
Having already in out tool belt a <a href="http://www.graylog2.org/">graylog2</a> facility in place, looking for a way to leverage it was the most natural thing to do.</p>

<p>Because of its nice modular <code>transports feature</code> our node-logging weapon of choice is <a href="https://github.com/flatiron/winston">winston</a>, the <code>graylog2</code> transport library looked a bit alone though and in need of a maintainer.
I our usual <strong>give back</strong> spirit we choose to adopt the lib instead of publishing a new one, and today we merged our 1st PR! :)</p>

<p>As for now our intervention was isolated to move away from the custom GELF protocol implementation, relying instead on the <a href="https://github.com/Wizcorp/node-graylog2">node-graylog2</a> library:
they&rsquo;ll most likely do a better job than us on the protocol side, and we&rsquo;ll be able to focus more on the winston integration.
We also started introducing some basic tests: definitely some better work can be done on this side ;)</p>

<p>So here it is: <a href="https://github.com/namshi/winston-graylog2">winston-graylog2</a>
and here&rsquo;s briefly how you use it:</p>

<p>the usual
<code>bash
npm install winston-graylog2
</code>
and then</p>

<p>```javascript
  var winston = require(&lsquo;winston&rsquo;);
  winston.add(require(&lsquo;winston-graylog2&rsquo;), options);</p>

<p>```</p>

<p>or</p>

<p>```javascript
var WinstonGraylog2 = require(&lsquo;winston-graylog2&rsquo;);
var logger = new(winston.Logger)({</p>

<pre><code>    exitOnError: false,
    transports: [new(WinstonGraylog2)(options)]
  });
</code></pre>

<p>```</p>

<p>Enjoy! :)</p>

<p>Publishing something new is always a great feeling, and it&rsquo;s even more fulfilling when it involves not letting a project die :)<br> So let us know if you like it and share the love with some RP!!!! ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome ES6 ! JavaScript is not fancy anymore]]></title>
    <link href="http://namshi.github.io/blog/2014/10/19/welcome-es6-javascript-is-not-fancy-anymore/"/>
    <updated>2014-10-19T12:04:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/10/19/welcome-es6-javascript-is-not-fancy-anymore</id>
    <content type="html"><![CDATA[<blockquote><p><strong>21/10/2014 UPDATE:</strong> This post was updated ( see the new examples for arrow functions and template strings ).</p>

<p>Thanks for the <a href="http://localhost:4000/blog/2014/10/19/welcome-es6-javascript-is-not-fancy-anymore/#disqus_thread">comments</a>
and the <a href="http://www.reddit.com/r/javascript/comments/2jr72y/welcome_es6_javascript_is_not_fancy_anymore/">Reddit discussion</a>.</p></blockquote>

<h2></h2>

<p>For years, JavaScript was considered as a toy language. It was used for creating interactive web pages and could run only in the browser. But, things changed; JavaScript is used in both, the server and the browser these days. The simplicity of the language made it so popular that developers started using it for large and complex projects.</p>

<p>However, new developers felt JavaScript was fancy at times. This was because of some of the known drawbacks in the language itself &mdash; and the workarounds put in place for fixing them. For example, a developer from a &ldquo;C&rdquo; language background is more familiar to block level scoping, but will have difficulties understanding function scoping in JavaScript. Along with lexical scoping, variable hoisting and closures might seem fancy or difficult to understand as well.</p>

<!--more-->


<p>ES6, the future version, is going to give a vast makeover to JavaScript. The <strong>TC39</strong> committee (responsible for ES6 standardization) have taken care of most of the concerns about JavaScript, and now ES6 is getting a lot of new features added, and existing bad parts fixed. If you want to know about the JavaScript good vs bad parts, check out Douglas Crockford’s book <a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript, the Good Parts</a>.</p>

<p>This post is <strong>not</strong> about the complete ES6 feature-set. Here, we will see some of the areas of JavaScript that look fancy, and how they are getting improved in ES6.</p>

<h2>ES6, all good parts?</h2>

<p>Again, I am not saying ES6 has only good parts. To be honest, I don&rsquo;t know. ES6 is not completely ready for live applications. Design patterns will automatically evolve once the language is used extensively. Design patterns can distinguish between the good and bad parts.</p>

<p>As of now, most ES6 features are not supported by browsers (as they’re in draft). We use transpiler tools to compile ES6 code to ES5. While there are many tools available, Google’s <a href="https://github.com/google/traceur-compiler">traceur</a> seems to be the most popular among them.</p>

<h2>8 fancy things fixed in ES6</h2>

<p>Here are some interesting improvements done in ES6:</p>

<h3>Object.is for better comparison</h3>

<p>New developers who learn JavaScript often stumble on the usage of <code>==</code> and <code>===</code>.  The <code>===</code> is a strict comparison operator where it checks the type of the operands also. For example, in this code:</p>

<p>```javascript
“0” == 0  // true</p>

<p>but</p>

<p>“0” === 0 // false
```</p>

<p>It is always recommended to use the <code>===</code> operator. However, there is an excepton to this; we cannot compare <code>NaN</code> using any of these operators. We need to use the global function <code>isNaN</code> to check if any variable has a <code>NaN</code> value or not.</p>

<p>```javascript
NaN == NaN  // false
NaN === NaN  // false</p>

<p>var result = isNan(NaN) // true
```</p>

<p><code>Object.is</code> is an attempt to have a better comparison method. It is the same as the <code>===</code> operator, except it can compare <code>NaN</code> also.</p>

<p><code>javascript
Object.is(0 ,”0”) // false
Object.is(0 ,0) // true
Object.is(NaN, NaN) // true
</code></p>

<h3>Let for block scoping.</h3>

<p>As opposed to languages like &ldquo;C&rdquo;, JavaScript doesn&rsquo;t have block scoping. All variables inside a block are hoisted to its containing function (if any) or will be part of the global scope.</p>

<p><code>javascript
if(true){
  var a = 10;
  console.log(a); // 10
}
// outside the if block
console.log(a); // a is accessible here also and prints 10
</code>
Following is a popular example of this:</p>

<p>Assume that we have 10 anchor tags in an html page. We need to alert the index of each anchor tag whenever it’s clicked. Now, look at the code below:</p>

<p>```javascript
var anchors = document.getElementsByTagName(“a”);
for(var i=0,len=anchors.length; i&lt;len; i++){</p>

<pre><code>anchors[i].onclick = function(){
    alert(i);
};
</code></pre>

<p>}
<code>``
If we think the above code works, we are wrong. It is the last value of</code>i` that is alerted. Here we will see <strong>10</strong> getting alerted.</p>

<p>We use a <strong>closure</strong> to fix this problem. Using closure, we can bind the right value of <code>i</code> to the onClick handler. See the code below:</p>

<p>```javascript
var anchors = document.getElementsByTagName(“a”);
for(var i=0,len=anchors.length; i&lt;len; i++){</p>

<pre><code>anchors[i].onclick = (function(i){
    return function(){
        alert(i);
    };
})(i);
</code></pre>

<p>}
```
Having a closure in the above code makes it unreadable and totally fancy to a new developer. Now we know why the word <strong>&ldquo;fancy&rdquo;</strong> is here.</p>

<p>ES6 introduces block scoping in JavaScript using the keyword <code>let</code>. If we write our first example, using <code>let</code>:</p>

<p><code>javascript
if(true){
  let a = 10;
  console.log(a); // 10
}
// outside the if block
console.log(a) // Reference error: a is not defined
</code></p>

<p><code>let</code> also binds the scope of the variable to the current block. In our second example, we can use <code>let</code> to solve the scoping problem:</p>

<p>```javascript
var anchors = document.getElementsByTagName(“a”);
for(let i=0,len=anchors.length; i&lt;len; i++){</p>

<pre><code>anchors[i].onclick = function(){
    alert(i);
}
</code></pre>

<p>}
```
Now the above code should work as expected.</p>

<h3>Multi-line strings and string interpolations</h3>

<p>Writing multiline strings is not so straightforward. The <code>\n</code> ( for newline ) has to be added where ever a line break is needed.</p>

<p><code>javascript
var myString = 'Lorem ipsum \ndolor sit amet,\n\n\n consectetur adipisicing\n elit.';
</code>
ES6 introduces <strong>template strings</strong> for creating multiline strings. In ES6, we can write the above example like this:</p>

<p>```javascript</p>

<pre><code>var myString = `Lorem ipsum 
                dolor sit amet,

                consectetur adipisicing
                elit.`;
</code></pre>

<p><code>``
So, here, we can use "\</code>&ldquo; (backtick) to create the strings.</p>

<p>Another interesting usecase of the template strings is variable interpolation. There is no native variable interpolation in ES5, but can be achieved by regular expressions or by manually appending the variable to the string. For example:</p>

<p>```javascript
// Using + operator
var name = &lsquo;Tony&rsquo;;
var age = 20;
var greeting = &lsquo;Hi, I am &rsquo;+name+&lsquo; and my age is &rsquo;+age;
console.log(greeting); // This prints &lsquo;Hi I am Tony and my age is 20&rsquo;</p>

<p>// Using regular expressions
var greeting = &lsquo;Hi, I am %name% and my age is %age%&rsquo;.replace(/%name%/g,name).replace(/%age%/g,age);
console.log(greeting); // This prints &lsquo;Hi I am Tony and my age is 20&rsquo;
```
In ES6, the above code is really simplified, and can be written like this:</p>

<p><code>javascript
var name = 'Tony';
var age = 20;
var greeting = `Hi, I am ${name} and my age is ${age}`;
console.log(greeting); // This prints 'Hi I am Tony and my age is 20'
</code></p>

<h3>Fat Arrow functions for binding scope</h3>

<p>Most new developers struggle to understand the <code>this</code> keyword in JavaScript. <code>this</code> is nothing but the execution context for a function, and for methods, <code>this</code> points to the object holding it. If the function is executed not as a method of an object, <code>this</code> will point to the global object (usually the window object).</p>

<p><code>this</code> can be confusing many times. Look at the below example:</p>

<p>```javascript
var name = &lsquo;Tom&rsquo;;
var obj = {</p>

<pre><code>name: 'Jerry',
sayName: function(){
    console.log(this.name);
},
greet: function(){
   setTimeout(function(){
       console.log('Hi,' + this.name );
   },100);
}
</code></pre>

<p>};
obj.sayName(); // logs Jerry
obj.greet(); // logs Hi, Tom
```</p>

<p>When the <code>sayName</code> is executed as an object method, <code>this</code> was pointing to object itself, so <code>this.name</code> will output &ldquo;Jerry&rdquo;. Inside the <code>greet</code> function, a <code>setTimeout</code> is used for delaying the function execution. <code>setTimeout</code> will invoke the function in global context, hence <code>this</code> will point to the global object.</p>

<p>We usually use <code>Function.bind</code> or <code>Function.call</code> or <code>Function.apply</code> to fix these kinds of problems.</p>

<p>```javascript
var name = &lsquo;Tom&rsquo;;
var obj = {</p>

<pre><code>name: 'Jerry',
sayName: function(){
    console.log(this.name);
},
greet: function(){
   setTimeout(function(){
       console.log('Hi,' + this.name );
   }.bind(this),100);
}
</code></pre>

<p>};
obj.sayName(); // logs Jerry
obj.greet(); // logs Hi, Jerry
```</p>

<p>ES6 added arrow functions to get rid of scoping issues. An arrow function will always lexically bind the <code>this</code> value to its surrounding environment. So the above code can be written in ES6 like this:</p>

<p>```javascript
var name = &lsquo;Tom&rsquo;;
var obj = {</p>

<pre><code>name: 'Jerry',
sayName: function(){
    console.log(this.name);
},
greet: function(){
   setTimeout( ()=&gt; {
       console.log('Hi,' + this.name );
   },100);
}
</code></pre>

<p>};
obj.sayName(); // logs Jerry
obj.greet(); // logs Hi, Jerry
```</p>

<p>Here, inside the arrow function, <code>this</code> always points to the parent scope <code>this</code> value.</p>

<p><strong>Note:</strong> <em>Since the arrow function is already bound to its execution context, we cannot apply .bind(), .call() or .apply() methods on it again.</em></p>

<h3>Destructuring</h3>

<p>Destructuring is the process of assigning the property values of an object to a local variable. For example, in JavaScript, we can do this:</p>

<p>```javascript</p>

<pre><code>var myGlobalConfig = {
    apiUrl: 'www.google.com/api',
    data1: 'some value',
    data2: 'another value',
    methodType: 'POST'
    // ... etc
};

// and in one of our functions

function makeAjaxRequest(config){
    var url = config.url;
    var method = config.methodType;
    var data = config.data2;
    $.ajax(url, method, data );
}

// call makeAjaxRequest
makeAjaxRequest( myGlobalConfig );
</code></pre>

<p>```</p>

<p>In the above code, whenever a function requires arguments as multiple parameters, we need to extract values from our config object and pass them as parameters. This is a problem when we have a large number of values that need to be extracted.</p>

<p>ES6 allows direct destructing assignments. So we can write the above example in a simple way, like this:</p>

<p>```javascript</p>

<pre><code>var myGlobalConfig = {
    apiUrl: 'www.google.com/api',
    data1: 'some value',
    data2: 'another value',
    methodType: 'POST'
    // ... etc
};

// and in one of our function

function makeAjaxRequest(config){
    var { url, methodType, data2 } = config;
    $.ajax(url, methodType, data2 );
}

// call makeAjaxRequest
makeAjaxRequest( myGlobalConfig );
</code></pre>

<p>```</p>

<h3>Default Argument Values for Functions</h3>

<p>One of the best features in ES6 is default arguments. As of now, we use the <code>||</code> to have default values for the function parameters. See the below code:</p>

<p>```javascript</p>

<pre><code>var myFunction = function(a, b, c){
    a = a || 10;
    b = b || 5;
    c = c || 8;
    return a*b*c;
};
</code></pre>

<p>```
Here is the same code written in ES6:</p>

<p>```javascript</p>

<pre><code>var myFunction = function(a=10, b=5, c=8){
    return a*b*c;
};
</code></pre>

<p>```</p>

<h3>Object method shorthands</h3>

<p>Look at the below object creation pattern. In this, all the public method/property of an object will have their own private counterparts. For example:</p>

<p>```javascript</p>

<pre><code>var myObject = (function(){
    var sayName = function(){
        console.log('this is sayname function');
    };
    var greet = 'This is a greeting';
    return {
        greet: greet,
        sayName: sayName
    }
})();
</code></pre>

<p>```
The above pattern is called <strong>Revealing module pattern</strong>. In ES6, it is much simplified by eliminating the column part. Thus, we can write the above code like this:</p>

<p>```javascript</p>

<pre><code>var myObject = (function(){
    var sayName = function(){
        console.log('this is sayname function');
    };
    var greet = 'This is a greeting';
    return {
        greet,
        sayName
    }
})();
</code></pre>

<p>```</p>

<h3>The super keyword for invoking super class methods</h3>

<p>JavaScript supports object oriented programming. But, implementing inheritance is tricky in JavaScript, as it is not supported natively. JavaScript even has the <code>super</code> keyword, however, it is not functional.</p>

<p>Most of the JavaScript frameworks those implement inheritance have a pattern like this:</p>

<p>```javascript</p>

<pre><code>var myBaseObj = {
    sayName: function(){
        // .. do something
    };
};

var mySubObj = Framework.extend(myBaseObj, {
    sayName: function(){
        this._super.apply(this,arguments);
        // .. do something else
    }
})
</code></pre>

<p><code>``
These frameworks use</code>_super<code>(or sometimes</code>uber<code>) to invoke the parent method. This is because,</code>super` was a reserved keyword (for the future) in JavaScript, and is not allowed for use as an identifier or method.</p>

<p>Now, the &ldquo;future&rdquo; has come. JavaScript&rsquo;s <code>super</code> keyword has been implemented in ES6. Now let&rsquo;s see how inheritance can be done:</p>

<p>```javascript</p>

<pre><code>var myBaseObj = {
    sayName: function(){
        // .. do something
    };
};
var mySubObj = {
    __proto__: myBaseObj,
    sayName: function(){
        super.sayName();
        // .. do something else
    }
})
</code></pre>

<p>```</p>

<p>Again, all these are just a small part of the ES6 feature-set. There are so many interesting features like Promises, Classes, Generator, Iterators, etc.</p>

<h2>Summary</h2>

<p>ES6 is the most promising version of JavaScript. It has so many features; features we were waiting for for years. ES6 will definitely help writing more modular and less quirky code in JavaScript.</p>

<p>Here in this article, we have seen the problems with the current version of JavaScript, and how ES6 fixes the problems and the workarounds. Now, the entire ES6 feature-set is beyond the scope of this post, for that you can check out these awesome resources.</p>

<ul>
<li><a href="https://github.com/lukehoban/es6features">https://github.com/lukehoban/es6features</a></li>
<li><a href="https://github.com/ericdouglas/ES6-Learning">https://github.com/ericdouglas/ES6-Learning</a></li>
<li><a href="http://espadrine.github.io/New-In-A-Spec/es6/">http://espadrine.github.io/New-In-A-Spec/es6/</a></li>
<li><a href="http://tc39wiki.calculist.org/es6/">http://tc39wiki.calculist.org/es6/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletter #55]]></title>
    <link href="http://namshi.github.io/blog/2014/09/11/newsletter-number-55/"/>
    <updated>2014-09-11T00:00:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/11/newsletter-number-55</id>
    <content type="html"><![CDATA[<p>It&rsquo;s TechThursday again!</p>

<blockquote><p>News from the IT Team:</p>

<p>In a few days <a href="http://tech.namshi.com/team/#Mohamad%20Hallal">Hallal</a> will attend <a href="http://london2014.live.symfony.com/">Symfony Live 2014 in London</a>. He also submitted
a talk, called <a href="http://frontendfirst.com/">frontend-first</a>, to <a href="http://confoo.ca">Confoo</a> &ndash; a conference that will take place in Canada on February 2015.
Please <a href="http://confoo.ca/en/call-for-papers/speaker/mohamad-hallal">vote for his talk</a> as ConFoo democratically
selects talks based on community votes.</p>

<p><a href="http://tech.namshi.com/team/#Alessandro%20Cinelli%20(cirpo)">Cirpo</a> is back from the USA, where he attended the <a href="http://2014.northeastphp.org">Northeast PHP 2014</a> conference.
He also gave a presentation called &ldquo;PHP is the king, Nodejs is the prince, Lua is the fool&rdquo;, check out the slides:</p>

<p><iframe src="http://namshi.github.io//www.slideshare.net/slideshow/embed_code/38794123" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/cirpo/newp" title="PHP is the King, nodejs is the Prince and Lua is the fool" target="_blank">PHP is the King, nodejs is the Prince and Lua is the fool</a> </strong></div></p></blockquote>

<p>But what has the team been looking at over the past week? Below
you&rsquo;ll find the usual list of interesting articles we discovered
in the past 7 days.</p>

<!-- more -->


<ul>
<li><p><a href="https://github.com/zendesk/cross-storage">Cross domain storage, an alternative di XAtuh</a></p></li>
<li><p><a href="http://jwt.io">JSON Web Tokens (JWT)</a></p></li>
<li><p><a href="https://github.com/endel/js2php">JavaScript to PHP source-to-source transpiler</a></p></li>
<li><p><a href="http://blog.risingstack.com/from-angularjs-to-react-the-isomorphic-way/">Isomorphic SPA pages</a></p></li>
<li><p><a href="http://arstechnica.com/information-technology/2014/09/how-a-new-html-element-will-make-the-web-faster/">How a new HTML element will make the Web faster</a></p></li>
<li><p><a href="http://ejohn.org/blog/write-code-every-day/">Write code everyday</a></p></li>
<li><p><a href="http://es6rocks.com/2014/08/what-is-next-for-javascript/">What is next for Javascript</a></p></li>
<li><p><a href="http://blog.teamtreehouse.com/learn-javascript">Why now is the best time to learn JavaScript</a></p></li>
<li><p><a href="http://appbaseio.github.io/twitter-appbase/">A real time twitter clone in 300 lines of AngularJS</a></p></li>
<li><p><a href="http://softwarecriollo.com/thoughts/sinatra-docker-private-github-repo">Sinatra with Docker using a private github repo</a></p></li>
<li><p><a href="https://www.digitalocean.com/company/blog/coreos-now-available-on-digitalocean/">CoreOS Now Available On DigitalOcean!</a></p></li>
<li><p><a href="http://blog.leanstack.io/how-docker-fits-into-the-current-devops-landscape">How Docker Fits Into The Current DevOps Landscape</a></p></li>
<li><p><a href="https://github.com/KryDos/JSONRulesChecker">A little library for checking JSON by rules</a></p></li>
<li><p><a href="http://pioneerjs.com">PioneerJs &ndash; A framework agnostic e2e javascript testing</a></p></li>
<li><p><a href="http://node-os.com/">node-os is the first operating system powered by npm</a></p></li>
<li><p><a href="http://justinhileman.info/article/git-pretty">How to Git Pretty: A Nice Chart on how to change Git History</a></p></li>
<li><p><a href="http://www.methodsandtools.com/archive/archive.php?id=14">Another look at incremental and iterative development</a></p></li>
<li><p><a href="http://mashable.com/2014/09/10/5-million-gmail-passwords-leak/?utm_cid=mash-com-fb-tech-link">A List of 5 Million &lsquo;Gmail Passwords&rsquo; Leaked, But There&rsquo;s No Need to Panic</a></p></li>
<li><p><a href="http://www.clypd.com/container-technology-integration-testing-with-docker">Container Technology: Integration Testing with Docker</a></p></li>
<li><p><a href="http://jlongster.com/A-Study-on-Solving-Callbacks-with-JavaScript-Generators">A Study on Solving Callbacks with JavaScript Generators</a></p></li>
<li><p><a href="http://qz.com/261181/the-hidden-structure-of-the-apple-keynote/">The hidden structure of the Apple keynote</a></p></li>
<li><p><a href="http://andrewgelman.com/2014/09/03/disagree-alan-turing-daniel-kahneman-regarding-strength-statistical-evidence/">I disagree with Alan Turing and Daniel Kahneman regarding the strength of statistical evidence</a></p></li>
<li><p><a href="https://github.com/google/cadvisor">cAdvisor &ndash; Analyzes resource usage and performance characteristics of running containers</a></p></li>
<li><p><a href="https://konklone.com/post/why-google-is-hurrying-the-web-to-kill-sha-1">Why Google is Hurrying the Web to Kill SHA-1</a></p></li>
<li><p><a href="https://blog.twitter.com/2014/push-our-limits-reliability-testing-at-twitter">Push our limits &ndash; reliability testing at Twitter</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletter #54]]></title>
    <link href="http://namshi.github.io/blog/2014/09/04/newsletter-number-54/"/>
    <updated>2014-09-04T11:17:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/04/newsletter-number-54</id>
    <content type="html"><![CDATA[<p>It&rsquo;s <a href="/blog/categories/techthursday/">TechThursday</a> again!</p>

<blockquote><p>Big news, in case you missed it: we&rsquo;re going public!</p>

<p><a href="http://kinnevik.se/en/Media/Press-releases/Kinnevik-and-Rocket-Internet-to-create-global-fashion-e-commerce-group/">http://kinnevik.se/en/Media/Press-releases/Kinnevik-and-Rocket-Internet-to-create-global-fashion-e-commerce-group/</a></p></blockquote>

<p>This week we&rsquo;ve been quite busy, in fact we announced
that <a href="/blog/2014/08/31/welcome-daniel/">Daniel is joining us</a> and
we took the time to talk about how we <a href="/blog/2014/09/02/innovate-payment-gate-way-library/">process payments</a>
and how we&rsquo;ve been trying to shift more to a
<a href="/blog/2014/09/01/5-devops-practices-you-should-consider-starting-today/">devops-ish culture</a> &mdash; long road ahead though!</p>

<p>Last but not least, we also wrote an article explaining
<a href="/blog/2014/08/31/php-generators-explained/">generators in PHP</a>
for whoever has missed them so far!</p>

<p>But what has the team been looking at over the past week? Below
you&rsquo;ll find the usual list of interesting articles we discovered
in the past 7 days.</p>

<!-- more -->


<ul>
<li><a href="http://buff.ly/1xbWXrt">JoliCI: run your CI builds locally, through docker</a></li>
<li><a href="http://buff.ly/1nWsdBi">Design how your objects talk through mocking</a></li>
<li><a href="http://buff.ly/Y9oaM6">HHVM Long Term Support</a></li>
<li><a href="http://buff.ly/1nmUssN">Configuring Redis High Availability</a></li>
<li><a href="http://speakingjs.com/">Another awesome book on JavaScript</a></li>
<li><a href="http://duojs.org/">Next generation package manager for the front-end</a></li>
<li><a href="http://tc39wiki.calculist.org/es6/">Redesigned TC39 ES6 Features</a></li>
<li><a href="https://github.com/medikoo/es6-symbol">ES-6 symbols shims for node</a></li>
<li><a href="https://github.com/reactphp/vagrant">React Vagrant</a></li>
<li><a href="http://code.tutsplus.com/series/working-with-symfony-2--cms-636">Working with Symfony 2</a></li>
<li><a href="http://arstechnica.com/information-technology/2014/08/is-there-a-benefit-to-compiling-your-code-as-you-go/">Is there a benefit to compiling your code as you go?</a></li>
<li><a href="https://gist.github.com/mathisonian/c325dbe02ea4d6880c4e">requiring npm modules in the browser console</a></li>
<li><a href="http://perf.fail/">perf.fail &ndash; do, learn, fail forward.</a></li>
<li><a href="http://samlambert.com/posts/how-we-work-on-queries-at-gitHub/">How we work on queries at github</a></li>
<li><a href="http://blog.flux7.com/benchmarking-analyzing-aws-m3-instances-for-performance-bandwidth">Benchmarking: Analyzing AWS m3 Instances for Performance, Bandwidth</a></li>
<li><a href="http://opensource.com/business/14/9/security-for-docker">Bringing new security features to Docker</a></li>
<li><a href="http://www.drdobbs.com/architecture-and-design/containers-for-development/240168801">Containers for Development</a></li>
<li><a href="http://www.davidmkerr.com/2014/08/dockerfile-golf-or-optimizing-docker.html">Dockerfile Golf (or optimizing the Docker build process) </a></li>
<li><a href="http://blog.ezyang.com/2014/08/the-fundamental-problem-of-programming-language-package-management/">The fundamental problem of programming language package management</a></li>
<li><a href="http://softwaredefinedtalk.com/">SoftwareDefinedTalk</a></li>
<li><a href="http://techblog.netflix.com/2014/08/announcing-scumblr-and-sketchy-search.html">Scumblr is an interesting tool for keeping an eye on potential exploits or discussions of your company/application elsewhere on the internet. All sorts of potential monitoring applications for this: https://github.com/netflix/scumblr</a></li>
<li><a href="https://github.com/spotify/helios">Helios is another docker orchestration platform designed for managing containers across a large fleet. Instructive documentation, debian packages and a vagrant setup for trying it out are all plus points</a></li>
<li><a href="https://github.com/ConradIrwin/aws-name-server">DNS server that lets you look up ec2 instances by instance name</a></li>
<li><a href="https://www.skylight.io/">Skylight is a smart profiler data detective code whisperer bug catcher flag raiser for rails apps</a></li>
<li><a href="http://www.liquibase.org/">Liquibase:&ndash; Source control for your database</a></li>
<li><a href="http://dweet.io/">dweet.io: Ridiculously simple messaging (and alerts) for the Internet of Things</a></li>
<li><a href="https://github.com/slap-editor/slap">Slap: Sublime-like terminal-based text editor</a></li>
<li><a href="http://pre-commit.com/">Pre-commit:&ndash;  A framework for managing and maintaining multi-language pre-commit hooks</a></li>
<li><a href="http://www.youtube.com/watch?v=aQipuiTcn3U">Julie Ralph (from Google) talks about End to End Angular Testing with Protractor</a></li>
<li><a href="http://www.appcelerator.com/blog/2012/05/comparing-titanium-and-phonegap/">Comparing Titanium and PhoneGap (Mobile app development)</a></li>
<li><a href="http://maurizzzio.github.io/PojoViz/public/vulcanize.htm">PojoViz &ndash; Plain Old JavaScript Object Visualization</a></li>
<li><a href="https://github.com/newrelic/centurion/">A mass deployment tool for Docker fleets</a></li>
<li><a href="https://github.com/josephyzhou/github-trending">Tracking the most popular Github repos, updated daily</a></li>
<li><a href="http://devops.com/blogs/specialists-vs-generalists-enterprise-devops/">Specialists vs. Generalists for Enterprise DevOps</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node-file-ensure, a small filesystem utility to make sure a file is there]]></title>
    <link href="http://namshi.github.io/blog/2014/08/22/node-file-ensure-a-small-filesystem-utility-to-make-sure-a-file-is-there/"/>
    <updated>2014-08-22T19:42:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/08/22/node-file-ensure-a-small-filesystem-utility-to-make-sure-a-file-is-there</id>
    <content type="html"><![CDATA[<p>This weekend we&rsquo;ve come up with a small utility
that will make our life easier, and hopefully <strong>yours</strong>
as well!</p>

<!-- more -->


<p>We use cascading mechanisms for our configurations, so, for
example, we define the config in a few different files:</p>

<ul>
<li><code>base.yml</code>, that has all the common configurations</li>
<li><code>dev.yml</code>, which is for local environments</li>
<li><code>staging.yml</code>, which is for our staging environment</li>
<li><code>live.yml</code>, well&hellip;you guessed it!</li>
</ul>


<p>So, for example, a <code>live.yml</code> might look like:</p>

<p><code>yaml
domain:   'namshi.com'
</code></p>

<p>whereas the base one has many more values:</p>

<p>{% raw %}
<code>yaml
apis:
  version:   'v1'
  domain:    'api.{{ domain }}'
  baseUrl:   'https://{{ apis.domain }}'
</code>
{% endraw %}</p>

<p>There&rsquo;s a problem with this approach: if one of the developers
wants to change a value in his <code>dev.js</code> git will tell him that
the file has changed, which is quite annoying!</p>

<p>To overcome this we always put it in the <code>.gitignore</code>:</p>

<p><code>
dev.yml
</code></p>

<p>and instead commit a <code>dev.yml.example</code> file that has the
skeleton of the file, asking everyone, when booting the application
for the first time, to copy that file to a <code>dev.js</code>.</p>

<p>Things work flawlessly until you need to do this 10 times
(I mean, in 10 projects, like we do) or when you forget this step
during the installation and waste a lot of time trying to debug why
the application is not running correctly.</p>

<p>To overcome this annoying issue we decided to develop a small utility,
<a href="https://github.com/namshi/node-file-ensure">node-file-ensure</a>, that
does all of this for you:</p>

<p>``` javascript
var ensure = require(&lsquo;file-ensure&rsquo;);</p>

<p>ensure(&lsquo;./config/dev.yml&rsquo;, {from: &lsquo;./config/dev.yml.example&rsquo;});
```</p>

<p>Simple as that!</p>

<p><code>ensure</code> will make sure to create an empty file if it doesnt find
the one you specified:</p>

<p><code>javascript
ensure('./config/dev.yml');
</code></p>

<p>and is able to copy the contents from another file,
like in the first example above:</p>

<p><code>javascript
ensure('./config/dev.yml', {from: './config/dev.yml.example'});
</code></p>

<p>If you need to run any check after <code>ensure</code> has run,
you can provide a callback:</p>

<p><code>javascript
ensure('path/to/config/dev.yml', {src: 'path/to/config/dev.yml.example'}, function(err){
  console.log(fs.readFileSync('path/to/config/dev.yml').toString() === fs.readFileSync('path/to/config/dev.yml.example').toString());
});
</code></p>

<p>That&rsquo;s it! Tests run through mocha and we&rsquo;ve set them up
on <a href="https://travis-ci.org/namshi/node-file-ensure">travis</a>,
to be on the safe side :)</p>

<p>If you have patches, suggestions or rants&hellip;feel free to open
an <a href="https://github.com/namshi/node-file-ensure/issues">issue on GitHub</a>!</p>
]]></content>
  </entry>
  
</feed>
