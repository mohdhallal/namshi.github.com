<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tech @ Namshi.com]]></title>
  <link href="http://namshi.github.io/atom.xml" rel="self"/>
  <link href="http://namshi.github.io/"/>
  <updated>2014-10-16T14:27:07+04:00</updated>
  <id>http://namshi.github.io/</id>
  <author>
    <name><![CDATA[Namshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Newsletter #60]]></title>
    <link href="http://namshi.github.io/blog/2014/10/16/newsletter-number-60/"/>
    <updated>2014-10-16T12:52:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/10/16/newsletter-number-60</id>
    <content type="html"><![CDATA[<p>Hello, It&rsquo;s <a href="http://namshi.github.io/blog/categories/techthursday/">#TechThursday</a> at <a href="http://twitter.com/techNamshi">#namshi</a>!</p>

<blockquote><p>News from the IT Team:</p>

<p>As you probably know reading our newsletter we are very interested in Docker, the open platform for distributed applications, that&rsquo;s why
<a href="http://tech.namshi.com/team/#Oluwaseun%20Obajobi">Oba</a>, <a href="http://tech.namshi.com/team/#Alessandro%20Nadalin">Alex</a> and <a href="http://tech.namshi.com/team/#Luciano%20Colosio">Lucio</a> will attend
the <a href="http://europe.dockercon.com/">Docker Europe conference in December</a></p>

<p>Have fun in the cold and grey Amsterdam guys :D</p></blockquote>

<p><strong>Here is the list with awesome links to keep you busy during the weekend::</strong></p>

<ul>
<li><p><a href="http://vimeo.com/105955605">Mary live-codes a JavaScript game from scratch </a></p></li>
<li><p><a href="http://tia.mat.br/blog/html/2014/10/06/life_of_a_http_request.html">Life of a HTTP request, as seen by my toy web server</a></p></li>
<li><p><a href="http://antirez.com/news/79">Redis cluster, no longer vaporware</a></p></li>
<li><p><a href="http://buff.ly/1sKB2ns">Passwordless authentication: Secure, simple, and fast to deploy</a></p></li>
<li><p><a href="http://buff.ly/1rukgDK">How POODLE Happened</a></p></li>
<li><p><a href="http://buff.ly/1sy0Cwc">Container Computing and AWS</a></p></li>
<li><p><a href="http://buff.ly/1xR9RYG">Google Map Tracks Your Every Move. Check Your &lsquo;Location History&rsquo; to Verify It</a></p></li>
<li><p><a href="http://buff.ly/1sJTgXC">Developer Preview of Version 3 of AWS SDK for PHP</a></p></li>
<li><p><a href="http://buff.ly/1sebUnL">HastyScribe, markdown to self-contained HTML pages</a></p></li>
<li><p><a href="http://buff.ly/1sEg4b4">AngularJS 1.3.0</a></p></li>
</ul>


<!-- more -->


<ul>
<li><p><a href="http://dendory.net/screenshots/abstraction_of_code.pdf">A study of code abstraction</a></p></li>
<li><p><a href="http://blog.ircmaxell.com/2014/10/an-open-letter-to-php-fig.html">An open letter to PHP-FIG</a></p></li>
<li><p><a href="http://kotlinlang.org/">Kotlin &ndash; Statically typed programming language targeting the JVM and JavaScript</a></p></li>
<li><p><a href="http://nodeframework.com/">Hand-picked registry of Node.js frameworks</a></p></li>
<li><p><a href="https://www.npmjs.org/package/restling">Restling: a promise based asynchronous http requests</a></p></li>
<li><p><a href="http://buff.ly/1nj1bcv">Loading webfonts with high performance on responsive websites</a></p></li>
<li><p><a href="http://buff.ly/1xGLtJe">Symfony3 upgrade guide</a></p></li>
<li><p><a href="http://buff.ly/1nhqhbV">Meteor.js: not new but better recheck :)</a></p></li>
<li><p><a href="http://buff.ly/1nhq1JY">What’s wrong with Angular.js</a></p></li>
<li><p><a href="http://buff.ly/1qG1b1s">Sharing micro-service authentication using Nginx, Passport and Redis Glozic</a></p></li>
<li><p><a href="http://buff.ly/1vZdoon">5 Programming Languages Marked for Death</a></p></li>
<li><p><a href="http://buff.ly/1sy17Xj">Amazon finally launched SSD storages for RDS</a></p></li>
<li><p><a href="http://buff.ly/1yYI10P">What does the adoption of the Blink rendering engine by the Chromium project mean for WebKit?</a></p></li>
<li><p><a href="http://www.sitepoint.com/javascript-beyond-web-2014/">All the places where you can use javascript</a></p></li>
<li><p>Comparison: <a href="https://medium.com/este-js-framework/whats-wrong-with-angular-js-97b0a787f903">what&rsquo;s wrong</a> and <a href="http://www.sitepoint.com/love-angularjs/">why I love</a> AngularJs</p></li>
<li><p><a href="https://www.datadoghq.com/2014/08/monitor-coreos-scale-datadog/">Monitor CoreOS at scale with Datadog</a></p></li>
<li><p><a href="http://swrveengineering.wordpress.com/2014/10/14/how-we-increased-our-ec2-event-throughput-by-50-for-free/">How we increased our EC2 event throughput by 50%, for free</a></p></li>
<li><p><a href="http://www.agileweboperations.com/supporting-millions-of-pretty-url-rewrites-in-nginx-with-lua-and-redis">Supporting Millions of Pretty URL Rewrites in Nginx with Lua and Redis</a></p></li>
<li><p><a href="http://www.filamentgroup.com/lab/to-picturefill.html">To Picturefill, or not to Picturefill</a></p></li>
<li><p><a href="http://www.benlesh.com/2014/09/dynamic-worker-threads-in-javascript.html">Dynamic Worker Threads In JavaScript</a></p></li>
<li><p><a href="http://www.toptal.com/angular-js/angular-js-demystifying-directives">AngularJS: Demystifying Directives</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">What the heck is the event loop anyway ?</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletter #59]]></title>
    <link href="http://namshi.github.io/blog/2014/10/09/newsletter-number-59/"/>
    <updated>2014-10-09T11:44:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/10/09/newsletter-number-59</id>
    <content type="html"><![CDATA[<p>Hello, It&rsquo;s <a href="http://namshi.github.io/blog/categories/techthursday/">#TechThursday</a> at <a href="http://namshi.com">#namshi</a> again!</p>

<blockquote><p>News from the IT Team:
Well, not so much today, it was a short week thanks to the cool EID break :)</p></blockquote>

<p>But what has the team been looking at over the past week? Below
you&rsquo;ll find the usual list of interesting articles we discovered
in the past 7 days.</p>

<ul>
<li><p><a href="http://www.sitepoint.com/anatomy-javascript-mv-framework/">JavaScript MV* Framework compared</a></p></li>
<li><p><a href="http://gajus.com/blog/2/the-definetive-guide-to-the-javascript-generators">The Definitive Guide to the JavaScript Generators</a></p></li>
<li><p><a href="http://bit.ly/10TxPHK">Cyclomatic and NPath complexity explained</a></p></li>
<li><p><a href="http://bit.ly/1xrDuPY">Best Practices for Designing a Pragmatic RESTful API</a></p></li>
</ul>


<!-- more -->


<ul>
<li><p><a href="http://www.sitepoint.com/preparing-ecmascript-6-new-string-methods/">ECMAScript 6 new String Methods</a></p></li>
<li><p><a href="https://github.com/alexfernandez/prototypes">Interesting lib of utility function. Use with caution, it touched the prototype (as the name suggestes)</a></p></li>
<li><p><a href="https://github.com/WhichBrowser/WhichBrowser">WhichBrowser &ndash; User agent sniffing gone too far</a></p></li>
<li><p><a href="http://www.quora.com/What-are-some-things-that-programmers-and-computer-scientists-know-but-most-people-dont">Things that programmers know, but most people don&rsquo;t?</a></p></li>
<li><p><a href="http://www.slideshare.net/Kevlin/worse-is-better-for-better-or-for-worse-38743956">Worse Is Better, for Better or for Worse</a></p></li>
<li><p><a href="http://www.slideshare.net/jeharrell/9-antipatterns-for-nodejs-teams">9 anti-patterns for node.js teams</a></p></li>
<li><p><a href="https://nakedsecurity.sophos.com/2014/10/07/dubai-police-add-facial-recognition-to-google-glass/">Dubai police add facial recognition to Google Glass</a></p></li>
<li><p><a href="http://www.quora.com/How-does-a-computer-chip-work/answer/Subhasis-Das">How does a computer chip work?</a></p></li>
<li><p><a href="http://www.airpair.com/angularjs/posts/top-10-mistakes-angularjs-developers-make">Top 10 mistakes AngularJS developers make</a></p></li>
<li><p><a href="https://speakerdeck.com/ubermuda/a-multi-container-symfony2-setup-with-docker">A multi-container Symfony2 setup with Docker</a></p></li>
<li><p><a href="http://buff.ly/1ndfRKh">Move Fast and Break Nothing</a></p></li>
<li><p><a href="http://buff.ly/1vOKash">New in Symfony 2.6: Security component improvements</a></p></li>
<li><p><a href="http://buff.ly/1vKUXni">Nightmare.js, a high level wrapper for phantomJS</a></p></li>
<li><p><a href="http://buff.ly/1xjPkvB">A Symfony bundle for providing Rate Limiting for your APIs</a></p></li>
<li><p><a href="http://buff.ly/1s72YSL">awesome shell</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=X6y-OyMPqfw">Design How Your Objects Talk Through Mocking</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=PSGEjv3Tqo0">The Better Parts, the new talk by Douglas Crockford. Mind blowing, not just for Js, about programming in general</a></p></li>
<li><p><a href="https://speakerdeck.com/jaytaph/the-new-features-of-php-5-dot-6-webinar">PHP 5.6 new features</a></p></li>
<li><p><a href="http://venturebeat.com/2014/10/06/the-cookie-is-dead-heres-how-facebook-google-and-apple-are-tracking-you-now/">The cookie is dead. Here’s how Facebook, Google, and Apple are tracking you now</a></p></li>
<li><p><a href="http://codon.com/refactoring-ruby-with-monads">Refactoring Ruby with Monads</a></p></li>
<li><p><a href="http://robots.thoughtbot.com/a-tmux-crash-course">A tmux Crash Course</a></p></li>
<li><p><a href="http://zachholman.com/talk/move-fast-break-nothing/">Move Fast and Break Nothing</a></p></li>
<li><p><a href="https://blog.twitter.com/2014/push-our-limits-reliability-testing-at-twitter">Push our limits &ndash; reliability testing at Twitter</a></p></li>
<li><p><a href="http://symfony.com/blog/new-in-symfony-2-6-bootstrap-form-theme">New in Symfony 2.6: Bootstrap form theme</a></p></li>
<li><p><a href="http://symfony.com/blog/new-in-symfony-2-6-simpler-security-voters">New in Symfony 2.6: Simpler Security Voters</a></p></li>
<li><p><a href="https://github.com/dannyvankooten/AltoRouter">AltoRouter, simple PHP router inspired by Sinatra</a></p></li>
<li><p><a href="https://medium.com/aws-activate-startup-blog/a-better-dev-test-experience-docker-and-aws-291da5ab1238">A Better Dev/Test Experience: Docker and AWS</a></p></li>
<li><p><a href="http://www.calazan.com/docker-cleanup-commands/">Docker Cleanup Commands</a></p></li>
<li><p><a href="http://geoffrey.io/a-php-development-environment-with-docker.html">A PHP development environment with Docker</a></p></li>
<li><p><a href="http://www.slideshare.net/PuppetLabs/tag/puppetconf-2014">PuppetConf 2014 slides</a></p></li>
<li><p><a href="https://github.com/airbnb/zonify">Zonify is a set of command line tools for managing Route53 DNS for an AWS infrastructure</a></p></li>
<li><p><a href="https://practicingruby.com/articles/infrastructure-automation">Infrastructure automation by example</a></p></li>
<li><p><a href="http://totems.co/blog/machine-learning-nodejs-gender-instagram/">Using Machine Learning and NodeJS to detect the gender of Instagram Users</a></p></li>
<li><p><a href="http://tylergaw.com/articles/building-osx-apps-with-js">Building OS X Apps with JavaScript</a></p></li>
<li><p><a href="http://www.cs.bham.ac.uk/~exr/lectures/opsys/10_11/lectures/os-dev.pdf">Writing a Simple Operating System from Scratch</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletter #58]]></title>
    <link href="http://namshi.github.io/blog/2014/10/02/newsletter-number-58/"/>
    <updated>2014-10-02T13:27:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/10/02/newsletter-number-58</id>
    <content type="html"><![CDATA[<p>Hello, It&rsquo;s <a href="http://namshi.github.io/blog/categories/techthursday/">#TechThursday</a> at <a href="http://namshi.com">#namshi</a> again!</p>

<blockquote><p>News from the IT Team:</p>

<p>Our fella Hallal is back from <a href="http://london2014.live.symfony.com">Symfony Live London</a> and he wrote a <a href="http://tech.namshi.com/blog/2014/10/02/what-went-down-at-symfonylive-london/">nice recap</a>, go and check it out.</p></blockquote>

<p>But what has the team been looking at over the past week? Below
you&rsquo;ll find the usual list of interesting articles we discovered
in the past 7 days.</p>

<ul>
<li><p><a href="http://www.centurylinklabs.com/docker-filesystem-persistence-with-flocker/">Docker Filesystem Persistence With Flocker</a></p></li>
<li><p><a href="http://www.ansible.com/blog/official-ansible-content-on-docker-hub">Official Ansible Content on Docker Hub</a></p></li>
<li><p><a href="http://www.youtube.com/watch?v=U4oB28ksiIo&amp;feature=youtu.be">What happens when you steal a hackers computer</a></p></li>
<li><p><a href="https://blog.cloudflare.com/introducing-universal-ssl/">Introducing Universal SSL</a></p></li>
</ul>


<!-- more -->


<ul>
<li><p><a href="https://www.loggly.com/blog/five-things-every-developer-know-syslog/">Five Things Every Developer Should Know About Syslog</a></p></li>
<li><p><a href="https://blog.cloudflare.com/keyless-ssl-the-nitty-gritty-technical-details/">Keyless SSL: The Nitty Gritty Technical Details</a></p></li>
<li><p><a href="https://www.joyent.com/developers/node/design">Node.js Best Practices</a></p></li>
<li><p><a href="http://mywiki.wooledge.org/FtpMustDie#preview">FTP Must Die</a></p></li>
<li><p><a href="http://www-users.cs.york.ac.uk/susan/joke/cpp.htm">Stroustrup C++ &lsquo;interview&rsquo;</a></p></li>
<li><p><a href="http://kartar.net/2014/09/when-logstash-and-syslog-go-wrong/">When Logstash and Syslog go wrong</a></p></li>
<li><p><a href="http://blog.thestateofme.com/2014/09/12/docker-networking/">Docker Networking</a></p></li>
<li><p><a href="https://practicingruby.com/articles/infrastructure-automation">Infrastructure automation by example</a></p></li>
<li><p><a href="http://cwebber.net/blog/2014/09/26/i-am-not-a-coder/">I Am Not a Coder</a></p></li>
<li><p><a href="https://kobra.io">Collaborative &ldquo;Google Docs&rdquo; for code</a></p></li>
<li><p><a href="http://paypal.github.io/nemo/">PayPal’s open source node.js automation framework</a></p></li>
<li><p><a href="https://github.com/angular/material">Material Design for AngularJS Apps</a></p></li>
<li><p><a href="http://www.centurylinklabs.com/simple-introduction-to-coreos-with-ceo-alex-polvi-and-cto-brandon-philips/">Simple Introduction to CoreOS</a></p></li>
<li><p><a href="https://github.com/winebarrel/roadworker">Roadworker is a tool to manage Route53</a></p></li>
<li><p><a href="http://mysqlhighavailability.com/mysql-group-replication-hello-world/">MySQL High Availability</a></p></li>
<li><p><a href="http://wiert.me/2014/04/08/venn-diagrams-of-sql-join-queries-via-data-visualization-google/">Venn Diagrams of SQL Join queries </a></p></li>
<li><p><a href="https://github.com/kasperisager/fig-phpstack">Fig managed docker PHP stack</a></p></li>
<li><p><a href="http://www.brightball.com/devops/docker-is-the-heroku-killer">Docker is the heroku killer</a></p></li>
<li><p><a href="http://blog.learningbyshipping.com/2014/09/25/beauty-of-testing/">Beauty of Testing</a></p></li>
<li><p><a href="http://buytaert.net/scaling-open-source-communities">Scaling Open Source communities</a></p></li>
<li><p><a href="https://speakerdeck.com/tammielis/a-tale-of-sass-in-an-open-source-world">A tale of Sass in an open source world</a></p></li>
<li><p><a href="https://github.com/osscafe/gulp-cheatsheet">A quite useful Gulp.js cheat sheet</a></p></li>
<li><p><a href="https://medium.com/@lucasalvini/on-organizing-conferences-a3737ad195a3">On organising conferences</a></p></li>
<li><p><a href="http://www.businessinsider.com/10-things-in-tech-you-need-to-know-today-october-1-2014-9">10 Things In Tech You Need To Know Today</a></p></li>
<li><p><a href="http://www.troyhunt.com/2014/09/everything-you-need-to-know-about.html">Everything you need to know about the Shellshock Bash bug</a></p></li>
<li><p><a href="http://philipwalton.com/articles/what-no-one-told-you-about-z-index/">What no one told you about z-index</a></p></li>
<li><p><a href="https://github.com/faif/python-patterns">Python design patterns</a></p></li>
<li><p><a href="https://www.joyent.com/developers/node/design">Nodejs best practices by Joyen</a></p></li>
<li><p><a href="http://www.slideshare.net/gummyindustries/why-is-a-blizzard-s-a-gamer-a-better-manager-than-you">Why is a Blizzard &rsquo;s gamer a better manager than you?</a></p></li>
<li><p><a href="http://method.ac/">Design for programmers</a></p></li>
<li><p><a href="http://addyosmani.com/blog/fixmyjs/">Automatically fix all the JavaScript linting errors</a></p></li>
<li><p><a href="http://tylergaw.com/articles/building-osx-apps-with-js">Building OSX Apps With JavaScript</a></p></li>
<li><p><a href="https://www.igvita.com/2013/12/16/optimizing-nginx-tls-time-to-first-byte/">Optimizing nginx tls time to first byte</a></p></li>
<li><p><a href="http://blnight.github.io/ngMario/">Learn AngularJS by Playing Mario</a></p></li>
<li><p><a href="http://mtdowling.com/blog/2014/09/28/guzzle-ring/">Guzzle-Ring and Future Responses</a></p></li>
<li><p><a href="https://wiki.php.net/rfc/remove_alternative_php_tags#vote">RFC to remove alternative PHP tags accepted for PHP 7</a></p></li>
<li><p><a href="https://blog.cloudflare.com/inside-shellshock/">Inside Shellshock: How hackers are using it to exploit systems</a></p></li>
<li><p><a href="http://symfony.com/blog/new-in-symfony-2-6-security-component-improvements">New in Symfony 2.6: Security component improvements</a></p></li>
<li><p><a href="http://symfony.com/blog/new-in-symfony-2-6-improvements-for-the-translation-component">New in Symfony 2.6: Improvements for the Translation component</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What went down at SymfonyLive London?]]></title>
    <link href="http://namshi.github.io/blog/2014/10/02/what-went-down-at-symfonylive-london/"/>
    <updated>2014-10-02T12:26:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/10/02/what-went-down-at-symfonylive-london</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://namshi.github.io/images/symfonylive.png" width="640" height="640" title="SymfonyLive" alt="SymfonyLive">
SymfonyLive London 2014 concluded with top-notch presentations from Symfony and industry gurus. It was an exceptional
opportunity being able to attend this conference and meet those people.</p>

<p>Here is my summary about some of the talks I had the chance to attend:</p>

<!-- more -->


<h2>Keynote: Understanding Craftsmanship by <a href="https://twitter.com/_md">Marcello Duarte</a></h2>

<p>Marcello delivered an outstanding keynote presentation on achieving craftsmanship in software.
He provided a walk through the <a href="http://manifesto.softwarecraftsmanship.org/">Software Craftsmanship Manifesto</a>
and how the Agile methodology should have been evolved to consider software craftsmanship as one of its practices.</p>

<p>The talk focused on:</p>

<ul>
<li>Delivering a well crafted software by following good practices such as clean code</li>
<li>Being steadfast by considering yourself a craftsman rather than an executionar</li>
<li>Focusing on the community by having mentors and supporting other programmers</li>
<li>Enhancing productivity by dealing with customers as partners who understand your passion and approach
in delivering code rather than focusing on completing tasks</li>
</ul>


<iframe src="http://namshi.github.io//www.slideshare.net/slideshow/embed_code/39722355" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/marcello.duarte/understanding-craftsmanship" title="Understanding craftsmanship" target="_blank">Understanding craftsmanship</a> </strong> from <strong><a href="http://www.slideshare.net/marcello.duarte" target="_blank">Marcello Duarte</a></strong> </div></p>

<h2>The dependency Trap by <a href="https://twitter.com/jakub_zalas">Jakub Zalas</a></h2>

<p>Jakub explained how bad it can be having a number of services depend on one external service and at a certain point,
when that external service needs to be replaced, you fall into what is called &lsquo;The Dependency Trap&rsquo; due
to high coupling.</p>

<p>The approach to follow in order to avoid such situations is to work on making internal services
loosely coupled from external ones by introducing interfaces and &lsquo;Dependency Inversion&rsquo;. The guidelines
of the Dependency Inversion principal are:</p>

<ul>
<li>High level modules (your services) should not depend on low level ones (libraries) instead, they should
depend on abstractions. In other words, both your services and the library should depend on interfaces that clearly
describe what they are expected to accomplish.</li>
<li>Abstractions should not depend on details. This means that your interface should not be a detail in a possible
more generic interface.</li>
</ul>


<p>Here at Namshi, we are introducing these practices, and as a starting point, we are loosely coupling our services from doctrine. It is
amazing to notice that we are on the right track and addressing industry wide issues!</p>

<h2>The Naked Bundle by <a href="https://twitter.com/matthiasnoback">Matthias Noback</a></h2>

<p>This was one of the most contreversial talks at the confrence! Matthias&rsquo;s goal through this talk was to motivate the symfony
community to start considering the fact that one day, they will be faced with a situation where they have to port their
code to a different framework. Motivated by that fact, he started exploring ways that allow a Symfony2 based codebase to be easily portable
to other frameworks and thus, depend less on the Symfony2 framework itself. Now the good part is that most of Symfony is based on components, however,
Bundles are not. He moves on by trying to introduce workarounds for controllers, entities and templates to reside outside the bundle and create the
&lsquo;Naked Bundle&rsquo;.</p>

<h2>Sylius e-commerce for symfony2 developers by Pawel Jedrzejewski</h2>

<p>A walk through Sylius, a powerful Symfony2 based E-commerce platform. Pawel explained how to start with Sylius, the available
bundles and components it introduces and how it can be used in non-Symfony codebase.</p>

<h2>Decoupling with design patterns and symfony DIC by <a href="https://twitter.com/everzet">Konstantin Kudryashov (everzet)</a></h2>

<p>One of the best presentations that took place at SymfonyLive, Everzet just rocked it! He introduced the techniques he
followed in building Behat v.3. His main goal was to try and deliver the most extensible test framework while
maintaining backword compatibility. He used these goals and techniques as examples on how Symfony2 based projects
should be built.</p>

<p>The main guidelines to achieve decoupling, extensibilty and backword compatibility are to:</p>

<ul>
<li>Avoid premature abstractions.</li>
<li>Close your code for any extensions (by using private attributes and final classes, for example).</li>
<li>When a use case that requires opening up a class or an attribute rises, identify a proper extension point and put lots of thought in it.</li>
<li>Whenever opening up a class or an attribute, keep in mind backward compatibility.</li>
<li>Utilize the Gang of Four design patterns wherever needed!</li>
</ul>


<p>In case of Behat, achieving the framework design goals was done by leveraging compiler passes as extension points and
using Delegation Loop, Decorator, Observer, Compsite, Chain of Responsibility and Adapter patterns. Each pattern was
used wherever necessary, for example, the Adapther pattern achieved the goal of backword compatibility by executing the
required transformation on legacy input and &lsquo;adapt&rsquo; it to the new one.</p>

<p>Basically, the solution to a desing problem must reside in one of the design patterns in the Gang of Four!</p>

<iframe src="http://namshi.github.io//www.slideshare.net/slideshow/embed_code/39591398" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/everzet/decoupling-with-design-patterns-and-symfony2-dic" title="Decoupling with Design Patterns and Symfony2 DIC" target="_blank">Decoupling with Design Patterns and Symfony2 DIC</a> </strong> from <strong><a href="http://www.slideshare.net/everzet" target="_blank">Konstantin Kudryashov</a></strong> </div></p>

<h2>Keynote: Doing Everything With Nothing, Ephemeralization In The Cloud by <a href="https://twitter.com/dzuelke">David Zuelke</a></h2>

<p>A very inspiring talk by David, he walks through the history of the evolution of daily life tools and how they keep doing
more with less (Ephemeralization).
From that point onwords, he explains how this observation relates to the computing world. We see that the cloud is
evolving daily by intorducing enhancements that makes developers&#8217; life easier and making them focus on what is important to them.
Infrastructure-as-a-service (IaaS) and Platform-as-a-Service (PaaS) are examples of this evolution. He moves on by introducing heroku,
a PaaS, and how it contributes to this fact by providing out of the box system solutions to developers.</p>

<p>All in all, the talks were inspiring and addressed current issues in web development. Can&rsquo;t wait for SymfonyLive London 2015!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletter #57]]></title>
    <link href="http://namshi.github.io/blog/2014/09/25/newsletter-number-57/"/>
    <updated>2014-09-25T11:41:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/25/newsletter-number-57</id>
    <content type="html"><![CDATA[<p>Hello, It&rsquo;s <a href="http://namshi.github.io/blog/categories/techthursday/">#TechThursday</a> at <a href="http://namshi.com">#namshi</a> again!</p>

<blockquote><p>News from the IT Team:</p>

<p>Hallal has already landed in London for <a href="http://london2014.live.symfony.com">Symfony Live</a> conference and he is having a blast.
<img class="thumb left" src="http://namshi.github.io/images/mohomad-sf-live.jpg"></p>

<p>And we are back with some more proposals to the <a href="http://confoo.ca/en">Confoo</a> conference in Canada:
check, and support them by voting <a href="http://tech.namshi.com/blog/2014/09/22/coding-on-the-edge-at-confoo/">for Alex</a>,
<a href="http://tech.namshi.com/blog/2014/09/20/interested-in-the-history-of-nodejs-then-lets-hear-it-from-lucio-at-the-confoo/">for Lucio</a> and <a href="http://tech.namshi.com/blog/2014/09/20/stop-using-crons-start-listening-to-geshan/">for Geshan</a>, go team Namshi!</p></blockquote>

<p>But what has the team been looking at over the past week? Below
you&rsquo;ll find the usual list of interesting articles we discovered
in the past 7 days.</p>

<ul>
<li><p><a href="http://mnapoli.fr/decoupling-packages/">Decoupling packages</a></p></li>
<li><p><a href="https://github.com/igorw/retry">A tiny library for retrying failing operations</a></p></li>
<li><p><a href="https://github.com/recoilphp/recoil">Cooperative multitasking for PHP via co-routines</a></p></li>
<li><p><a href="http://bit.ly/1peew15">The Right Way (In computer science, everything is a trade-off)</a></p></li>
</ul>


<!-- more -->


<ul>
<li><p><a href="http://bit.ly/1rnFojIr">Docker Introduction &ndash; Slides from a Red Hat Software Engineer</a></p></li>
<li><p><a href="http://bit.ly/1ClG2ly">Doctrine filters and annotations to improve security and ease development in a Symfony app</a></p></li>
<li><p><a href="http://bit.ly/1ssxTdJ">Do Programmers Need to Be &lsquo;Masters of Their Domain&rsquo;?</a></p></li>
<li><p><a href="http://blog.npmjs.org/post/98131109725/npm-2-0-0">npm 2.0 released</a></p></li>
<li><p><a href="https://github.com/kissyteam/xtemplate">yet another javascript template language: eXtensible</a></p></li>
<li><p><a href="http://buff.ly/Y8wHhI">New in Symfony 2.6: LockHandler</a></p></li>
<li><p><a href="http://buff.ly/1umFydE">Prevent errors from breaking gulp watch</a></p></li>
<li><p><a href="http://buff.ly/1x8bO5r">CloudScale – Automatic Cloud Infrastructure Scaling</a></p></li>
<li><p><a href="http://buff.ly/1v5l3zZ">CTOs are the new PANDAs</a></p></li>
<li><p><a href="http://buff.ly/1rlSMoL">PHP: why GOTO instead of recursion?</a></p></li>
<li><p><a href="http://buff.ly/1vcJ6w5">New in Symfony 2.6: Smarter assets:install command</a></p></li>
<li><p><a href="http://buff.ly/XZAWfx">Symfony 2.6 fast approaching its stabilization phase</a></p></li>
<li><p><a href="http://buff.ly/1mz0prV">An Early Investor Offers Some Lessons From Alibaba’s Evolution</a></p></li>
<li><p><a href="http://buff.ly/1tNRLGV">One Thing Well – blog about simple, useful software</a></p></li>
<li><p><a href="http://buff.ly/1rb7vCE">Amazon SNS &ndash; Now With Enhanced Support for iOS 8</a></p></li>
<li><p><a href="http://buff.ly/1mrlPap">JavaScript Memory Management Masterclass</a></p></li>
<li><p><a href="http://buff.ly/Z2xrpM">Apple announces API that allows using JavaScript for Automation</a></p></li>
<li><p><a href="http://buff.ly/1rb0NfY">Resource management in Docker</a></p></li>
<li><p><a href="http://buff.ly/1tGyWoT">Node OS</a></p></li>
<li><p><a href="http://buff.ly/Z2v5Hq">Why I changed my mind about Node.js</a></p></li>
<li><p><a href="http://blog.enfocussolutions.com/">The Business Analyst as Explorer: An Inquiry, Not an Inquisition</a></p></li>
<li><p><a href="http://www.technologyreview.com/news/529011/can-technology-fix-medicine/">Can Technology Fix Medicine? Medical data is a hot spot for venture investing and product innovation.</a></p></li>
<li><p><a href="https://news.layervault.com/stories/33347-pdf-mobile--multidevice--design-lessons--learned-building-polar-by-luke-wroblewski">Mobile &amp; multi-device lessons learned, a free e-book by Luke Wroblewski</a></p></li>
<li><p><a href="http://erenyagdiran.github.io/I-was-just-asked-to-crack-a-program-Part-1/">&ldquo;I was just asked to crack a program in a job interview !&rdquo;</a></p></li>
<li><p><a href="http://www.youtube.com/watch?v=XCVOxht34Hs">Be a happier developer with Docker</a></p></li>
<li><p><a href="http://www.thinkful.com/learn/angularjs-tutorial-build-a-gmail-clone/Directives-Overview">Learn AngularJS by Creating a Gmail Clone</a></p></li>
<li><p><a href="http://www.html5rocks.com/en/tutorials/shapes/getting-started/">Getting Started with CSS Shapes</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design, Architecture and Code on the edge @Confoo]]></title>
    <link href="http://namshi.github.io/blog/2014/09/22/coding-on-the-edge-at-confoo/"/>
    <updated>2014-09-22T09:01:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/22/coding-on-the-edge-at-confoo</id>
    <content type="html"><![CDATA[<p>At Namshi we run a product that needs to evolve quickly and be ready to change: new features and
technologies are integrated every week to be able to keep up to date with the market and the technology around us.
That&rsquo;s how we started using nodejs, Angular, Docker, SPDY and much more&hellip;</p>

<p><strong>Do you want to hear more?</strong></p>

<!-- more -->


<p><img class="left team" src="http://namshi.github.io/images/alex.jpg">
<a href="http://tech.namshi.com/team#Alessandro%20Nadalin">Alex</a> submitted a bunch of talks to the 2015 edition of the Confoo conference, so just
<a href="http://confoo.ca/en/call-for-papers/speaker/alessandro-nadalin">vote for his talks</a>.<br>
His talks cover a wide variety of topics from Symfony, Angular, HTTP to Dockerinzing your application.</p>

<p>How cool is that?<br>
If you are looking for sharp and engaging sessions, <strong>these are definitely bound to make you sit up and notice</strong>.</p>

<br>


<br>


<br>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interested in the history of NodeJS? Then let's hear it from Lucio at the ConFoo]]></title>
    <link href="http://namshi.github.io/blog/2014/09/20/interested-in-the-history-of-nodejs-then-lets-hear-it-from-lucio-at-the-confoo/"/>
    <updated>2014-09-20T22:37:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/20/interested-in-the-history-of-nodejs-then-lets-hear-it-from-lucio-at-the-confoo</id>
    <content type="html"><![CDATA[<p>Not really hard to believe, NodeJS is a beloved one among
the plethora of technologies that we use at <a href="https://namshi.com">Namshi</a>;
that&rsquo;s why we got people like <a href="http://namshi.github.io/team#Luciano%20Colosio">Lucio</a> on board so that we
could expand in that direction.</p>

<!-- more -->


<p><img class="left team" src="http://namshi.github.io/images/lucio.jpg" title="Luciano Colosio" ></p>

<p>And you know what? Lucio loves Node so much that he&rsquo;d like
to talk about it at a big stage, like the one the
<a href="http://confoo.ca/">ConFoo</a> of next february.</p>

<p>Then don&rsquo;t miss the chance to
<a href="http://confoo.ca/en/call-for-papers/speaker/luciano-colosio">vote one of his proposals</a>
as he&rsquo;d be very happy to introduce you the history of NodeJS
(I heard part of that talk, since he already gave it internally
for the Namshi team, and I have to admit it was freaking
interesting), how it was born and what pushed
<a href="http://www.quora.com/Who-is-Ryan-Dahl">Rian Dahl</a> to write
this beautiful platform; the other talk that he has in the
pipeline is a good introduction on how to embrace the
non-blocking paradigm and he will explain how to make sure
that you treat the Event Loop responsibly :)</p>

<p>Definitely worth it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop using crons, start listening to Geshan]]></title>
    <link href="http://namshi.github.io/blog/2014/09/20/stop-using-crons-start-listening-to-geshan/"/>
    <updated>2014-09-20T12:15:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/20/stop-using-crons-start-listening-to-geshan</id>
    <content type="html"><![CDATA[<p><a href="http://namshi.github.io/team#Geshan%20Manandhar">Geshan</a> has decided
he can&rsquo;t stand seeing people struggling with
crons anymore, therefore he decided to give it a
shot at the <a href="http://confoo.ca/en/call-for-papers/speaker/geshan-manandhar">2015 edition of the confoo</a>.</p>

<!-- more -->


<p><img class="right team" src="http://namshi.github.io/images/geshan.jpg"></p>

<p>If you want to hear how Symfony integrates (so) nicely
with messaging queues and, specifically, with RabbitMQ
don&rsquo;t waste a second and <a href="http://confoo.ca/en/call-for-papers/speaker/geshan-manandhar">vote his talk</a>
so that he can get the chance to take the stage at the
canadian conference.</p>

<p>He will talk about our <strong>direct experience with RabbitMQ</strong>,
including <strong>MQ best practices</strong> and an overview of the
available tools, so that the audience will be able to
understand the theory, see how it works in practice
and form his own opinion.</p>

<p>Well done Geshan, we hope to hear how Namshi handles
gazilions of messages in Canada!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletter #56]]></title>
    <link href="http://namshi.github.io/blog/2014/09/18/newsletter-number-56/"/>
    <updated>2014-09-18T00:00:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/18/newsletter-number-56</id>
    <content type="html"><![CDATA[<p>Hello, It&rsquo;s <a href="http://namshi.github.io/blog/categories/techthursday/">#TechThursday</a> at <a href="http://namshi.com">#namshi</a> again!</p>

<blockquote><p>News from the IT Team:</p>

<p><a href="http://tech.namshi.com/team/#Mohamad%20Hallal">Hallal</a> wrote an interesting <a href="http://buff.ly/1wpoLEN">post</a> about <strong>Shisha</strong>: a nodejs library for creating smoke tests in no time.</p>

<p>We submitted some proposals to the <a href="http://confoo.ca/en">Confoo</a> conference in Canada:
check, and support them by voting <a href="http://confoo.ca/en/call-for-papers/speaker/mohamad-hallal">for Hallal</a> and <a href="http://confoo.ca/en/call-for-papers/speaker/alessandro-cinelli">for Cirpo!</a></p></blockquote>

<p>But what has the team been looking at over the past week? Below
you&rsquo;ll find the usual list of interesting articles we discovered
in the past 7 days.</p>

<ul>
<li><p><a href="http://buff.ly/YRamGD">Pants: Build system by Twitter, Foursquare, and Square</a></p></li>
<li><p><a href="http://buff.ly/YPLMWA">Push notification click-through rates</a></p></li>
<li><p><a href="http://buff.ly/1y9BVu1">Get your public IP address, uberfast</a></p></li>
<li><p><a href="http://buff.ly/ZmVSy7">The joy of make at jsconfeu</a></p></li>
<li><p><a href="http://buff.ly/1nVAllI">JavaScript and the Browser: Under the Hood</a></p></li>
</ul>


<!-- more -->


<ul>
<li><p><a href="http://buff.ly/1m1R63B">Pioneerjs: javascript integration testing</a></p></li>
<li><p><a href="http://buff.ly/Xccibb">Create an app like twitter in 300 lines of AngularJS</a></p></li>
<li><p><a href="http://buff.ly/1tMee4A">ECMAScript 6 modules: the final syntax</a></p></li>
<li><p><a href="http://buff.ly/1m1QI52">What&rsquo;s next for JavaScript &ndash; ES6 Rocks</a></p></li>
<li><p><a href="http://buff.ly/YFRhXE">Write Code Every Day</a></p></li>
<li><p><a href="http://buff.ly/1tM6pf9">Current #Redis cost is 1.5 man a month</a></p></li>
<li><p><a href="http://felixniklas.com/dimensions">A Chrome extension to measure everything </a></p></li>
<li><p><a href="http://dfir.org/">Recommended Security Reading List </a></p></li>
<li><p><a href="http://www.jetbrains.com/phpstorm/whatsnew/">PhpStorm 8 is out!</a></p></li>
<li><p><a href="http://www.youtube.com/playlist?list=PLHfLBrRzKS4rU4zt5vUyIMI77YL8wbnic">Express.js for beginners</a></p></li>
<li><p><a href="https://github.com/danielstjules/pho">Pho &ndash; BDD test framework for PHP</a></p></li>
<li><p><a href="http://www.smashingmagazine.com/2014/09/17/why-companies-need-full-time-product-managers/">Why Companies Need Full-Time Product Managers (And What They Do All Day)</a></p></li>
<li><p><a href="https://www.loggly.com/blog/what-60000-customer-searches-taught-us-about-logging-in-json/">What 60,000 Customer Searches Taught Us about Logging in JSON</a></p></li>
<li><p><a href="http://www.broken-links.com/2014/08/28/css-variables-updating-custom-properties-javascript/">CSS Variables: Access Custom Properties with JavaScript</a></p></li>
<li><p><a href="http://www.stevesouders.com/blog/2014/09/12/onload-in-onload/">&ldquo;Onload in Onload&rdquo; or “Why you should use document.readyState”</a></p></li>
<li><p><a href="http://zoompf.com/blog/2014/08/bootstrap-fonts">Speed Up Your Bootstrap and Font-Awesome Sites Using Font Compression</a></p></li>
<li><p><a href="http://www.webperformancetoday.com/2014/09/17/progressive-image-rendering-good-evil/">Progressive image rendering: Good or evil?</a></p></li>
<li><p><a href="http://williamdurand.fr/2013/08/07/ddd-with-symfony2-folder-structure-and-code-first/">DDD with Symfony2: Folder Structure And Code First</a></p></li>
<li><p><a href="http://konradpodgorski.com/blog/2014/06/23/better-way-to-work-with-assets-in-symfony-2/">A better way to work with assets in Symfony 2</a></p></li>
<li><p><a href="http://calebmadrigal.com/why-i-changed-my-mind-about-nodejs/">Why I changed my mind about NodeJs</a></p></li>
<li><p><a href="http://www.airpair.com/php/fatal-error-allowed-memory-size">Fixing PHP Fatal Error: Allowed Memory Size Exhausted</a></p></li>
<li><p><a href="http://crashworks.org/if_programming_languages_were_vehicles">If Programming Languages were Vehicles</a></p></li>
<li><p><a href="http://mohdhallal.github.io/blog/2014/09/12/handling-multiple-entity-managers-in-doctrine-the-smart-way/">Handling multiple entity managers in symfony and doctrine, the smart way</a></p></li>
<li><p><a href="http://node-os.com/">Node OS</a></p></li>
<li><p><a href="http://www.nkode.io/2014/09/12/easymysql.html">Easy MySQL with Docker</a></p></li>
<li><p><a href="https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/">Resource management in Docker</a></p></li>
<li><p><a href="http://dantehranian.wordpress.com/2014/09/08/docker-jenkins-dynamically-provisioning-sles-11-build-containers/">Docker + Jenkins: Dynamically Provisioning SLES 11 Build Containers</a></p></li>
<li><p><a href="https://redsmin.com/">All-in-one fully featured GUI for Redis</a></p></li>
<li><p><a href="https://github.com/zettio/weave/">Weave creates a virtual network that connects Docker containers deployed across multiple hosts.</a></p></li>
<li><p><a href="http://voltframework.com/">A ruby web framework where your ruby runs on both server and client</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shisha, smoke test those URLs!]]></title>
    <link href="http://namshi.github.io/blog/2014/09/17/shisha-smoke-test-those-urls/"/>
    <updated>2014-09-17T10:00:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/17/shisha-smoke-test-those-urls</id>
    <content type="html"><![CDATA[<p>Here comes Shisha! Yet another NodeJs based application from Namshi! Shisha is a smoke testing module,
what is smoke testing? Read about it <a href="http://en.wikipedia.org/wiki/Smoke_testing_(software)">here</a>.
In short, smoke testing is a term coming from Electrical Engineering, where an Electronic chip is simply tested by
plugging it into an electric source and observing if smoke comes out! How does shisha relate to this? Well,
just give shisha a list or a file of URLs and expected HTTP status code for each URL, and it will assert the expected
status codes and show you back a report! It serves as a quick and fast testing platform for your website/APIs.
Instead of waiting for a unit or an integration test to be prepared and run, simply set shisha to run on your URLs,
it is fast and simple!</p>

<!-- more -->


<h1>Install it</h1>

<p>Install shisha globally from <a href="https://www.npmjs.org/package/shisha">NPM</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g shisha</span></code></pre></td></tr></table></div></figure>


<h1>Prepare it and smoke it</h1>

<p>Create a text file named <code>.smoke</code> where all your test cases will reside.</p>

<p>Fill it as following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://example.org 200
</span><span class='line'>http://example.org/not-there 404</span></code></pre></td></tr></table></div></figure>


<p>From the directory where your <code>.smoke</code> file is, run <code>shisha</code> and observe the shisha smoking!</p>

<p>Here is a video illustration:</p>

<p><video width='640' height='640' preload='none' controls poster=''><source src='http://tech.namshi.com/videos/example.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<h1>Features</h1>

<p>You can:&ndash;</p>

<ul>
<li>Pass a path to any text file containing the right URL status code mapping using <code>--smoke</code> argument</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shisha --smoke /path/to/text/file</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Pass locals to be replaced in your text file</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shisha --domain example.org --protocol http</span></code></pre></td></tr></table></div></figure>


<p>so your text file would look something like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{{ protocol }}://{{ domain }}/path 200</span></code></pre></td></tr></table></div></figure>


<p>Here is how locals work:</p>

<p><video width='640' height='640' preload='none' controls poster=''><source src='http://tech.namshi.com/videos/locals.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<ul>
<li>Easily extend shisha in your code as follows:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install --save shisha</span></code></pre></td></tr></table></div></figure>


<p>then, in your code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var shisha = require('shisha');</span></code></pre></td></tr></table></div></figure>


<p>you will have access to the <code>smoke</code> method which accepts the following arguments:</p>

<ol>
<li>data source, which can be a path to a text file, a list or an object.</li>
<li>A list of locals to be replaced in the placeholders of the text file.</li>
<li>A callback which accepts the report argument where the set of smoking results are parsed.</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> shisha.smoke('/path/to/a/text/file', options, callback);</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shisha.smoke(
</span><span class='line'>    [
</span><span class='line'>        {
</span><span class='line'>             url: 'http://example.org',
</span><span class='line'>             status: 200
</span><span class='line'>         },
</span><span class='line'>         ...,
</span><span class='line'>         ...
</span><span class='line'>    ], locals, callback
</span><span class='line'>);</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shisha.smoke(
</span><span class='line'>    {
</span><span class='line'>        'http://example.org': 200,
</span><span class='line'>        'http://example2.org': 404,
</span><span class='line'>        ...,
</span><span class='line'>        ...
</span><span class='line'>    }, locals, callback
</span><span class='line'>);</span></code></pre></td></tr></table></div></figure>


<p><code>locals</code> as mentioned before, is a list of placeholders to be replaced in the smoke file</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shisha.smoke(urls, {protocol: 'https', domain: 'namshi.com'}</span></code></pre></td></tr></table></div></figure>


<p><code>callback</code> is a function called when smoking is done!</p>

<p>if you do not have any locals, you can simply omit it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shisha.smoke(urls, callback);</span></code></pre></td></tr></table></div></figure>


<p>Happy smoking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wanna hear about SOA and how we deal with APIs? Then vote for cirpo!]]></title>
    <link href="http://namshi.github.io/blog/2014/09/16/wanna-hear-about-soa-and-how-we-deal-with-apis-then-vote-for-cirpo/"/>
    <updated>2014-09-16T09:02:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/16/wanna-hear-about-soa-and-how-we-deal-with-apis-then-vote-for-cirpo</id>
    <content type="html"><![CDATA[<p>Aaaaand following our first announcement
regarding <a href="http://namshi.github.io/blog/2014/09/10/what-is-frontend-first-lets-hear-it-at-the-next-edition-of-the-confoo/">&ldquo;conquering&rdquo; the ConFoo</a>,
as promised, we go ahead with the second
charge!</p>

<!-- more -->


<p><img class="team right" src="http://namshi.github.io/images/cirpo.jpg"></p>

<p><a href="http://namshi.github.io/team">Cirpo</a> has decided to capitalize on
the opportunity of being in the cold lands of
Canada to offer <strong>a few</strong> learning opportunities
for the attendees, as
<a href="http://confoo.ca/en/call-for-papers/speaker/alessandro-cinelli">the list of his proposals</a>
is quite long and impressive.</p>

<p>If you are willing to hear how we do web services
and how we integrated an <strong>API-first</strong> approach then
don&rsquo;t miss the opportunity to rate his talks, as I&rsquo;m
sure he&rsquo;d be happy to showcase our best practices and
hear your feedbacks and suggestions, to make Namshi&rsquo;s
SOA even sharper; along with these topics he&rsquo;ll be
happy to talk about some of the other tools and systems
we use like Redis and RabbitMQ.</p>

<p>But even more important, <a href="http://confoo.ca/en/register">grab your ticket</a> for the
event as I can ensure you it&rsquo;s one of a kind and you won&rsquo;t
regret it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletter #55]]></title>
    <link href="http://namshi.github.io/blog/2014/09/11/newsletter-number-55/"/>
    <updated>2014-09-11T00:00:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/11/newsletter-number-55</id>
    <content type="html"><![CDATA[<p>It&rsquo;s TechThursday again!</p>

<blockquote><p>News from the IT Team:</p>

<p>In a few days <a href="http://tech.namshi.com/team/#Mohamad%20Hallal">Hallal</a> will attend <a href="http://london2014.live.symfony.com/">Symfony Live 2014 in London</a>. He also submitted
a talk, called <a href="http://frontendfirst.com/">frontend-first</a>, to <a href="http://confoo.ca">Confoo</a> &ndash; a conference that will take place in Canada on February 2015.
Please <a href="http://confoo.ca/en/call-for-papers/speaker/mohamad-hallal">vote for his talk</a> as ConFoo democratically
selects talks based on community votes.</p>

<p><a href="http://tech.namshi.com/team/#Alessandro%20Cinelli%20(cirpo)">Cirpo</a> is back from the USA, where he attended the <a href="http://2014.northeastphp.org">Northeast PHP 2014</a> conference.
He also gave a presentation called &ldquo;PHP is the king, Nodejs is the prince, Lua is the fool&rdquo;, check out the slides:</p>

<p><iframe src="http://namshi.github.io//www.slideshare.net/slideshow/embed_code/38794123" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/cirpo/newp" title="PHP is the King, nodejs is the Prince and Lua is the fool" target="_blank">PHP is the King, nodejs is the Prince and Lua is the fool</a> </strong></div></p></blockquote>

<p>But what has the team been looking at over the past week? Below
you&rsquo;ll find the usual list of interesting articles we discovered
in the past 7 days.</p>

<!-- more -->


<ul>
<li><p><a href="https://github.com/zendesk/cross-storage">Cross domain storage, an alternative di XAtuh</a></p></li>
<li><p><a href="http://jwt.io">JSON Web Tokens (JWT)</a></p></li>
<li><p><a href="https://github.com/endel/js2php">JavaScript to PHP source-to-source transpiler</a></p></li>
<li><p><a href="http://blog.risingstack.com/from-angularjs-to-react-the-isomorphic-way/">Isomorphic SPA pages</a></p></li>
<li><p><a href="http://arstechnica.com/information-technology/2014/09/how-a-new-html-element-will-make-the-web-faster/">How a new HTML element will make the Web faster</a></p></li>
<li><p><a href="http://ejohn.org/blog/write-code-every-day/">Write code everyday</a></p></li>
<li><p><a href="http://es6rocks.com/2014/08/what-is-next-for-javascript/">What is next for Javascript</a></p></li>
<li><p><a href="http://blog.teamtreehouse.com/learn-javascript">Why now is the best time to learn JavaScript</a></p></li>
<li><p><a href="http://appbaseio.github.io/twitter-appbase/">A real time twitter clone in 300 lines of AngularJS</a></p></li>
<li><p><a href="http://softwarecriollo.com/thoughts/sinatra-docker-private-github-repo">Sinatra with Docker using a private github repo</a></p></li>
<li><p><a href="https://www.digitalocean.com/company/blog/coreos-now-available-on-digitalocean/">CoreOS Now Available On DigitalOcean!</a></p></li>
<li><p><a href="http://blog.leanstack.io/how-docker-fits-into-the-current-devops-landscape">How Docker Fits Into The Current DevOps Landscape</a></p></li>
<li><p><a href="https://github.com/KryDos/JSONRulesChecker">A little library for checking JSON by rules</a></p></li>
<li><p><a href="http://pioneerjs.com">PioneerJs &ndash; A framework agnostic e2e javascript testing</a></p></li>
<li><p><a href="http://node-os.com/">node-os is the first operating system powered by npm</a></p></li>
<li><p><a href="http://justinhileman.info/article/git-pretty">How to Git Pretty: A Nice Chart on how to change Git History</a></p></li>
<li><p><a href="http://www.methodsandtools.com/archive/archive.php?id=14">Another look at incremental and iterative development</a></p></li>
<li><p><a href="http://mashable.com/2014/09/10/5-million-gmail-passwords-leak/?utm_cid=mash-com-fb-tech-link">A List of 5 Million &lsquo;Gmail Passwords&rsquo; Leaked, But There&rsquo;s No Need to Panic</a></p></li>
<li><p><a href="http://www.clypd.com/container-technology-integration-testing-with-docker">Container Technology: Integration Testing with Docker</a></p></li>
<li><p><a href="http://jlongster.com/A-Study-on-Solving-Callbacks-with-JavaScript-Generators">A Study on Solving Callbacks with JavaScript Generators</a></p></li>
<li><p><a href="http://qz.com/261181/the-hidden-structure-of-the-apple-keynote/">The hidden structure of the Apple keynote</a></p></li>
<li><p><a href="http://andrewgelman.com/2014/09/03/disagree-alan-turing-daniel-kahneman-regarding-strength-statistical-evidence/">I disagree with Alan Turing and Daniel Kahneman regarding the strength of statistical evidence</a></p></li>
<li><p><a href="https://github.com/google/cadvisor">cAdvisor &ndash; Analyzes resource usage and performance characteristics of running containers</a></p></li>
<li><p><a href="https://konklone.com/post/why-google-is-hurrying-the-web-to-kill-sha-1">Why Google is Hurrying the Web to Kill SHA-1</a></p></li>
<li><p><a href="https://blog.twitter.com/2014/push-our-limits-reliability-testing-at-twitter">Push our limits &ndash; reliability testing at Twitter</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is frontend-first? Lets hear it at the next edition of the Confoo]]></title>
    <link href="http://namshi.github.io/blog/2014/09/10/what-is-frontend-first-lets-hear-it-at-the-next-edition-of-the-confoo/"/>
    <updated>2014-09-10T00:22:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/10/what-is-frontend-first-lets-hear-it-at-the-next-edition-of-the-confoo</id>
    <content type="html"><![CDATA[<p>Just a heads up that we will have quite a few attempt
at &ldquo;conquering&rdquo; canada&rsquo;s hottest tech conference, and the
first to try is our <a href="http://namshi.github.io/team#Mohamad%20Hallal">Mohammed</a>.</p>

<!-- more -->


<p>He has submitted a talk about <a href="http://frontendfirst.com/">frontend-first</a>
and, if you&rsquo;d like to hear him or want to support
our lebanese &ldquo;rockstar&rdquo;, please <a href="http://confoo.ca/en/call-for-papers/speaker/mohamad-hallal">vote his talk</a>
as ConFoo democratically selects them based on the attendees&#8217;
&ndash; or supposed attendees &ndash; feedback.</p>

<p>He will give an overview of what <em>frontend first</em> means and
how you can focus on the surface of your apps with tools
like <a href="https://github.com/namshi/mockserver">mockserver</a>.</p>

<p>See you in Montreal? :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A bit of Namshi at the Symfony Live this month!]]></title>
    <link href="http://namshi.github.io/blog/2014/09/08/a-bit-of-namshi-at-the-symfony-live-this-month/"/>
    <updated>2014-09-08T21:41:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/08/a-bit-of-namshi-at-the-symfony-live-this-month</id>
    <content type="html"><![CDATA[<p>Pretty excited that we are going to be present
at the <a href="http://london2014.live.symfony.com/">Symfony Live</a>
which will happen at the end of this month, in London.</p>

<!-- more -->


<p><a href="http://namshi.github.io/team#mohamad%20hallal">Mohamad</a>, who has been quite
productive lately &ndash; both with <a href="http://mohdhallal.github.io/">blogging</a>
and releasing some open source libraries (like
<a href="https://github.com/namshi/mockserver">mockserver</a> and <a href="https://github.com/namshi/shisha">shisha</a>) &ndash;
has decided to take advantage of one of the bonuses that
we are offering &mdash; tickets for conferences!</p>

<p>He will have the chance to get to meet the leaders in the
PHP community in one of the most amazing conferences the
PHP panorama can offer.</p>

<p>We wish Hallal a safe trip to the United Kingdom
and we hope he&rsquo;ll have a blast learning some new stuff
and seeing a new place!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletter #54]]></title>
    <link href="http://namshi.github.io/blog/2014/09/04/newsletter-number-54/"/>
    <updated>2014-09-04T11:17:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/04/newsletter-number-54</id>
    <content type="html"><![CDATA[<p>It&rsquo;s <a href="http://namshi.github.io/blog/categories/techthursday/">TechThursday</a> again!</p>

<blockquote><p>Big news, in case you missed it: we&rsquo;re going public!</p>

<p><a href="http://kinnevik.se/en/Media/Press-releases/Kinnevik-and-Rocket-Internet-to-create-global-fashion-e-commerce-group/">http://kinnevik.se/en/Media/Press-releases/Kinnevik-and-Rocket-Internet-to-create-global-fashion-e-commerce-group/</a></p></blockquote>

<p>This week we&rsquo;ve been quite busy, in fact we announced
that <a href="http://namshi.github.io/blog/2014/08/31/welcome-daniel/">Daniel is joining us</a> and
we took the time to talk about how we <a href="http://namshi.github.io/blog/2014/09/02/innovate-payment-gate-way-library/">process payments</a>
and how we&rsquo;ve been trying to shift more to a
<a href="http://namshi.github.io/blog/2014/09/01/5-devops-practices-you-should-consider-starting-today/">devops-ish culture</a> &mdash; long road ahead though!</p>

<p>Last but not least, we also wrote an article explaining
<a href="http://namshi.github.io/blog/2014/08/31/php-generators-explained/">generators in PHP</a>
for whoever has missed them so far!</p>

<p>But what has the team been looking at over the past week? Below
you&rsquo;ll find the usual list of interesting articles we discovered
in the past 7 days.</p>

<!-- more -->


<ul>
<li><a href="http://buff.ly/1xbWXrt">JoliCI: run your CI builds locally, through docker</a></li>
<li><a href="http://buff.ly/1nWsdBi">Design how your objects talk through mocking</a></li>
<li><a href="http://buff.ly/Y9oaM6">HHVM Long Term Support</a></li>
<li><a href="http://buff.ly/1nmUssN">Configuring Redis High Availability</a></li>
<li><a href="http://speakingjs.com/">Another awesome book on JavaScript</a></li>
<li><a href="http://duojs.org/">Next generation package manager for the front-end</a></li>
<li><a href="http://tc39wiki.calculist.org/es6/">Redesigned TC39 ES6 Features</a></li>
<li><a href="https://github.com/medikoo/es6-symbol">ES-6 symbols shims for node</a></li>
<li><a href="https://github.com/reactphp/vagrant">React Vagrant</a></li>
<li><a href="http://code.tutsplus.com/series/working-with-symfony-2--cms-636">Working with Symfony 2</a></li>
<li><a href="http://arstechnica.com/information-technology/2014/08/is-there-a-benefit-to-compiling-your-code-as-you-go/">Is there a benefit to compiling your code as you go?</a></li>
<li><a href="https://gist.github.com/mathisonian/c325dbe02ea4d6880c4e">requiring npm modules in the browser console</a></li>
<li><a href="http://perf.fail/">perf.fail &ndash; do, learn, fail forward.</a></li>
<li><a href="http://samlambert.com/posts/how-we-work-on-queries-at-gitHub/">How we work on queries at github</a></li>
<li><a href="http://blog.flux7.com/benchmarking-analyzing-aws-m3-instances-for-performance-bandwidth">Benchmarking: Analyzing AWS m3 Instances for Performance, Bandwidth</a></li>
<li><a href="http://opensource.com/business/14/9/security-for-docker">Bringing new security features to Docker</a></li>
<li><a href="http://www.drdobbs.com/architecture-and-design/containers-for-development/240168801">Containers for Development</a></li>
<li><a href="http://www.davidmkerr.com/2014/08/dockerfile-golf-or-optimizing-docker.html">Dockerfile Golf (or optimizing the Docker build process) </a></li>
<li><a href="http://blog.ezyang.com/2014/08/the-fundamental-problem-of-programming-language-package-management/">The fundamental problem of programming language package management</a></li>
<li><a href="http://softwaredefinedtalk.com/">SoftwareDefinedTalk</a></li>
<li><a href="http://techblog.netflix.com/2014/08/announcing-scumblr-and-sketchy-search.html">Scumblr is an interesting tool for keeping an eye on potential exploits or discussions of your company/application elsewhere on the internet. All sorts of potential monitoring applications for this: https://github.com/netflix/scumblr</a></li>
<li><a href="https://github.com/spotify/helios">Helios is another docker orchestration platform designed for managing containers across a large fleet. Instructive documentation, debian packages and a vagrant setup for trying it out are all plus points</a></li>
<li><a href="https://github.com/ConradIrwin/aws-name-server">DNS server that lets you look up ec2 instances by instance name</a></li>
<li><a href="https://www.skylight.io/">Skylight is a smart profiler data detective code whisperer bug catcher flag raiser for rails apps</a></li>
<li><a href="http://www.liquibase.org/">Liquibase:&ndash; Source control for your database</a></li>
<li><a href="http://dweet.io/">dweet.io: Ridiculously simple messaging (and alerts) for the Internet of Things</a></li>
<li><a href="https://github.com/slap-editor/slap">Slap: Sublime-like terminal-based text editor</a></li>
<li><a href="http://pre-commit.com/">Pre-commit:&ndash;  A framework for managing and maintaining multi-language pre-commit hooks</a></li>
<li><a href="http://www.youtube.com/watch?v=aQipuiTcn3U">Julie Ralph (from Google) talks about End to End Angular Testing with Protractor</a></li>
<li><a href="http://www.appcelerator.com/blog/2012/05/comparing-titanium-and-phonegap/">Comparing Titanium and PhoneGap (Mobile app development)</a></li>
<li><a href="http://maurizzzio.github.io/PojoViz/public/vulcanize.htm">PojoViz &ndash; Plain Old JavaScript Object Visualization</a></li>
<li><a href="https://github.com/newrelic/centurion/">A mass deployment tool for Docker fleets</a></li>
<li><a href="https://github.com/josephyzhou/github-trending">Tracking the most popular Github repos, updated daily</a></li>
<li><a href="http://devops.com/blogs/specialists-vs-generalists-enterprise-devops/">Specialists vs. Generalists for Enterprise DevOps</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Innovate Payment Gateway Library]]></title>
    <link href="http://namshi.github.io/blog/2014/09/02/innovate-payment-gate-way-library/"/>
    <updated>2014-09-02T19:23:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/02/innovate-payment-gate-way-library</id>
    <content type="html"><![CDATA[<p>In the tech <a href="https://namshi.com">Namshi</a> team, as you probably know, we fully support the open source movement,
that&rsquo;s why we try to release open source software as soon as we can, in the full &ldquo;give back to the community&rdquo; mindset.
You can check all our project on <a href="http://github.com/namshi">github</a></p>

<p>Lots of e-commerce companies and service providers have online payments for their
customers. So do we.</p>

<p>Our weapon of choice, apart from PayPal, to carry out payments is: <a href="http://www.innovatepayments.com">Innovate.</a>
That&rsquo;s why we developed and released the <a href="https://github.com/namshi/innovate">Innovate library</a>, written in PHP.</p>

<p><a href="http://www.innovatepayments.com">Innovate</a> payment gateway accepts all types of credit card payments.</p>

<!-- more -->


<h2>Installation</h2>

<p>You can easily integrate the Innovate library in your project via <a href="https://getcomposer.org">composer</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer install namshi/innovate</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://namshi.github.io/images/posts/cards.png" title="payment cards" ></p>

<h2>Usage</h2>

<p>Using this library is easy, here is what you need:</p>

<ul>
<li>initialize the Innovate client</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Innovate\Payment\Transaction</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Innovate\Payment\BillingInformation</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Innovate\Payment\Browser</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Innovate\Payment\Billing\Customer</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Innovate\Payment\Billing\Address</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Innovate\Payment\Card</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Innovate\Client</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$client</span>      <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">(</span><span class="nv">$storeId</span><span class="p">,</span> <span class="nv">$authenticationKey</span><span class="p">);</span> <span class="c1">// retrieve them from your Innovate account</span>
</span><span class='line'><span class="nv">$transaction</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Transaction</span><span class="p">(</span><span class="s1">&#39;sale&#39;</span><span class="p">,</span> <span class="s1">&#39;ecom&#39;</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="s1">&#39;ORDER_NUMBER&#39;</span><span class="p">,</span> <span class="s1">&#39;DESCRIPTION&#39;</span><span class="p">,</span> <span class="s1">&#39;USD&#39;</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="s1">&#39;AN OPTIONAL REFERENCE TO YOUR TRANSACTION&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$card</span>        <span class="o">=</span> <span class="k">new</span> <span class="nx">Card</span><span class="p">(</span><span class="s1">&#39;1234123412341234&#39;</span><span class="p">,</span> <span class="s1">&#39;111&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">\DateTime</span><span class="p">(</span><span class="nv">$cardExpiryDate</span><span class="p">));</span>
</span><span class='line'><span class="nv">$customer</span>    <span class="o">=</span> <span class="k">new</span> <span class="nx">Customer</span><span class="p">(</span><span class="s1">&#39;Mr&#39;</span><span class="p">,</span> <span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="s1">&#39;Doe&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$address</span>     <span class="o">=</span> <span class="k">new</span> <span class="nx">Address</span><span class="p">(</span><span class="s1">&#39;My address info 1&#39;</span><span class="p">,</span> <span class="s1">&#39;My address info 2&#39;</span><span class="p">,</span> <span class="s1">&#39;My address info 3&#39;</span><span class="p">,</span> <span class="s1">&#39;San Francisco&#39;</span><span class="p">,</span> <span class="s1">&#39;California&#39;</span><span class="p">,</span> <span class="s1">&#39;US&#39;</span><span class="p">,</span> <span class="s1">&#39;00000&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$billing</span>     <span class="o">=</span> <span class="k">new</span> <span class="nx">BillingInformation</span><span class="p">(</span><span class="nv">$customer</span><span class="p">,</span> <span class="nv">$address</span><span class="p">,</span> <span class="s2">&quot;customers&#39;s-email@gmail.com&quot;</span><span class="p">,</span> <span class="nv">$customerIpAddress</span><span class="p">);</span>
</span><span class='line'><span class="nv">$browser</span>     <span class="o">=</span> <span class="k">new</span> <span class="nx">Browser</span><span class="p">(</span><span class="nv">$customUserAgent</span><span class="p">,</span> <span class="nv">$requestAcceptHeader</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We used OOP to cover all the data we need to send to Innovate:</p>

<p><code>$client</code> is a model that contains the Innovate account info.</p>

<p><code>$transaction</code> represents a detailed transaction where we pass as many arguments as Innovate needs.</p>

<p><code>$card</code> represents the required card details to perform the payment.</p>

<p><code>$customer</code> represents the customer details.</p>

<p><code>$address</code> represents the customer address details.</p>

<p><code>$billing</code> represents the customer billing address and contact details.</p>

<p><code>$browser</code> represents detailed browser info, including the User-Agent.</p>

<p><code>$customUserAgent</code> is the browser user agent header.</p>

<p><code>$requestAcceptHeader</code> is the browser accept header.</p>

<h2>How It Works</h2>

<p>To perform the payment you need to create a request to <a href="http://www.innovatepayments.com">Innovate</a> and pass the previous created objects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">performPayment</span><span class="p">(</span><span class="nv">$transaction</span><span class="p">,</span> <span class="nv">$card</span><span class="p">,</span> <span class="nv">$billing</span><span class="p">,</span> <span class="nv">$browser</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will then get one of the following responses:</p>

<ul>
<li><h2>Normal transaction</h2>

<p>A normal transaction follows a very simple flow: It just requires authentication through Innovate, and the library then performs the payment.</p></li>
<li><h2>3D secure transactions</h2>

<p>A <a href="http://en.wikipedia.org/wiki/3-D_Secure">3-D_Secure</a> transaction requires two requests to Innovate and one request for 3D Secure in order
to add an additional security layer while performing the payment.
The first request is already sent to Innovate and if it is 3D Secure transaction you will need to redirect the user to the concerned party
(primarily, the bank) to confirm the payment.</p></li>
</ul>


<p>After that the process continues by sending another request to Innovate containing the extra validation values.</p>

<p>You can easily distinguish between the two possible types of payments, 3D Secure and Normal, by looking at the type of Innovate response received:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="k">use</span> <span class="nx">Namshi\Innovate\Http\Response\Redirect</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">performPayment</span><span class="p">(</span><span class="nv">$transaction</span><span class="p">,</span> <span class="nv">$card</span><span class="p">,</span> <span class="nv">$billing</span><span class="p">,</span> <span class="nv">$browser</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$response</span> <span class="nx">instanceOf</span> <span class="nx">Redirect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 3D secure transactions</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Normal transactions</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In case of normal Transactions, the library will perform the payment directly.
In case of 3D Secure transactions you need to send another request
with more details (related to the third security party) as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Innovate\Http\Response\Redirect</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$response</span> <span class="nx">instanceof</span> <span class="nx">Redirect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// build a form</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The response object contains the values (&lsquo;targetUrl&rsquo;, &lsquo;session&rsquo;, &lsquo;paReq&rsquo;) which are needed to build the form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$targetUrl</span>  <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getTargetUrl</span><span class="p">();</span>
</span><span class='line'><span class="nv">$session</span>    <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getSession</span><span class="p">();</span>
</span><span class='line'><span class="nv">$pareq</span>      <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getPareq</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, the receiving the previous values will be used to build a form as hidden values.
The form will be sent to the <code>$targetUrl</code> which is the 3D-secure service page as the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;form</span> <span class="na">name=</span><span class="s">&quot;acsform&quot;</span> <span class="na">action=</span><span class="s">&quot;[targetUrl from the response]&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;PaReq&quot;</span> <span class="na">value=</span><span class="s">&quot;[The pareq data from response]&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;MD&quot;</span> <span class="na">value=</span><span class="s">&quot;[Any value can be stored here which will be sent back unchanged in the the 3d secure response e.g to preserve the session id which we can send back to complete the transaction]&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;TermUrl&quot;</span> <span class="na">value=</span><span class="s">&quot;[return URL on your site]&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;noscript&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;Submit&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/noscript&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>termUrl</code>: the URL that we need to direct the user to, after the user submits the form.</p>

<p>See an example of an ACS (Access Control Server) Form</p>

<p>We need to submit the form with Javascript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">autosub</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">forms</span><span class="p">[</span><span class="s1">&#39;acsform&#39;</span><span class="p">].</span><span class="nx">submit</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">onload</span><span class="o">=</span><span class="nx">autosub</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After the form is submitted, the user is redirected to a 3D Secure page which asks for extra credentials.
Once the user submits the 3D Secure form, he/she gets redirected to the &lsquo;termUrl&rsquo; page with two hidden values
(&lsquo;PaRes&rsquo;, &lsquo;MD&rsquo;) which are used to create the final request to Innovate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$extraData</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;PaRes&#39;</span>     <span class="o">=&gt;</span> <span class="s1">&#39;Authentication response&#39;</span><span class="p">,</span> <span class="c1">// we get this value from hidden fields after redirection to termUrl</span>
</span><span class='line'>    <span class="s1">&#39;session&#39;</span>   <span class="o">=&gt;</span> <span class="s1">&#39;MD&#39;</span><span class="p">,</span> <span class="c1">// we get this value from hidden fields after redirection to termUrl</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$finalResponse</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">(</span><span class="nv">$client</span><span class="o">-&gt;</span><span class="na">createRemoteRequest</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="nx">Client</span><span class="o">::</span><span class="na">INNOVATE_URL</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="nv">$extraData</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we get the final response which can be checked for payment status &ndash; success or denied:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="mi">200</span> <span class="o">===</span> <span class="nv">$finalResponse</span><span class="o">-&gt;</span><span class="na">getStatusCode</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// payment done</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// authentication failed</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Tests</h2>

<p>We added two types of tests; to run them you need to install the dev dependencies using composer and then run
the test using <a href="http://phpunit.de">PHPUnit</a></p>

<ul>
<li><h3>Functional Test:</h3>

<p>These test the library functionality without sending any real request to Innovate, just hit this on your terminal:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">phpunit</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h3>integration Test</h3>

<p>There are a couple of integration tests that verify that the library works flawlessly by creating
real requests to the Innovate payment gateway. Just use valid test credentials, then create a file
called .innovate.config in the project directory with four parameters:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$configs</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;storeId&#39;</span>           <span class="o">=&gt;</span> <span class="s1">&#39;xxxxx&#39;</span><span class="p">,</span> <span class="c1">//store Id in Innovate</span>
</span><span class='line'>    <span class="s1">&#39;authenticationKey&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;xxxxxxxxxxx&#39;</span><span class="p">,</span> <span class="c1">//authentication key</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Card info</span>
</span><span class='line'><span class="nv">$cardInfo</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;number&#39;</span>    <span class="o">=&gt;</span> <span class="s1">&#39;xxxxxxxxxxxx&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;cvv&#39;</span>       <span class="o">=&gt;</span> <span class="s1">&#39;XXX&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The card which need redirection for 3d secured</span>
</span><span class='line'><span class="nv">$redirectUrlCardInfo</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;number&#39;</span>    <span class="o">=&gt;</span> <span class="s1">&#39;xxxxxxxxxxxx&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;cvv&#39;</span>       <span class="o">=&gt;</span> <span class="s1">&#39;XXX&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// your ip, it should be in Innovate white list</span>
</span><span class='line'><span class="nv">$ip</span> <span class="o">=</span> <span class="s1">&#39;xxx.xxx.xxx.xxx&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After the setup, just run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">phpunit tests/Namshi/Innovate/Test/Integration/ServiceTest.php</span>
</span></code></pre></td></tr></table></div></figure>


<p>We hope that you enjoy using Namshi&rsquo;s open source library. We&rsquo;ve been using this library for almost a year and
it&rsquo;s working fine with no issues on our side. As always, any feedback and pull requests are welcome :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 DevOps practices you should consider starting today]]></title>
    <link href="http://namshi.github.io/blog/2014/09/01/5-devops-practices-you-should-consider-starting-today/"/>
    <updated>2014-09-01T09:33:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/01/5-devops-practices-you-should-consider-starting-today</id>
    <content type="html"><![CDATA[<p>DevOps simply stresses on communication, collaboration and integration between software developers and information technology (IT) operations professionals a.k.a sys admins. it&rsquo;s goal is to support automation and maximize predictability, efficiency, security and maintainability of operational processes, meaning you can deploy 5 times on production on the same day with confidence that all systems will be fully operational. This post is moreover a software enginner&rsquo;s point of view on the DevOps side.</p>

<!-- more -->


<p>It goes without mentioning, to build a robust architecture you will need to follow the industry standards for example, use a distributed version control system &ndash; <a href="http://git-scm.com/">git</a> is a great one, use automated deployment tools &ndash; you should check <a href="http://capistranorb.com/">Capistrano</a>, write automated tests using framework like <a href="http://phpunit.de/">PHPUnit</a>, have some form of continuous integration &ndash; you can run automated tests with <a href="https://travis-ci.com/">Travis CI</a> on different versions of a language and have some internal documentation in place which includes basic to advanced things about the codebase and the systems used. Following similar rules, at <a href="http://www.namshi.com">Namshi</a> we use some <a href="http://en.wikipedia.org/wiki/DevOps">DevOps</a> practices which are very helpful to us, here are some main ones:</p>

<h2>Virtual Development Environment -Vagrant</h2>

<p><a href="http://www.vagrantup.com/">Vagrant</a> is a virtual development environment that works as controller to a virtual machine on your main machine. The virtual machine has all needed software stack installed, each software is installed as a config. It creates a reproducible and portable development machine which is shared among all the developers, that in turn eliminates &ldquo;Works on my machine&rdquo; syndrome and also help to get started with working on the codebase in a matter of hours compared to a day.</p>

<p>With use of vagrant, it is very easy to install new software and update them. You just add some scripts to how the vagrant box is configured and push the changes. All the software engineers will pull it, reload the vagrant machine and done. All of them have the new software and the correct version of it. As the configs, services and even file paths are shared everyone is on the same page when discussing about the system. If you are already interested in vagrant don&rsquo;t hesitate to start reading it&rsquo;s <a href="http://docs.vagrantup.com/v2/getting-started/index.html">docs</a>.</p>

<h2>Atomic Deployments</h2>

<p>Some months back we used to follow a revised version of <a href="http://nvie.com/posts/a-successful-git-branching-model/">gitflow</a> and grouped multiple tickets in same deployment, basically some completed tickets (generally 4-8) where merged to the <code>develop</code> branch and then merged to the  <code>release</code> branch. A tag was created from the <code>release</code> branch say <code>1.2.3</code> and it was deployed to <code>staging</code> then <code>production</code> after tests were ok. If all goes well the tag is merged to <code>master</code>. Issues with this was, if we had a problem after the deployment pinpointing which ticket introduced this issue was difficult.</p>

<p>Lets fast forward to now, currently we do <strong>atomic deployments</strong>, it means only one ticket is deployed at a time. Each ticket has it&rsquo;s sole deployment. First the ticket is deployed to <code>staging</code> tested and if everything is fine then it&rsquo;s deployed to production.</p>

<p>So, you completed your ticket all the automated tests have passed and your code has been reviewed, then</p>

<ol>
<li>You deploy it on <code>staging</code> environment after making sure that your branch is rebased with latest <code>master</code>.</li>
<li>If all tests are fine a tag is created from your ticket&rsquo;s branch say <code>1.2.3</code>.</li>
<li>The tag <code>1.2.3</code> is deployed to production.</li>
<li>If all goes well on production, then the tag <code>1.2.3</code> is merged to master.</li>
</ol>


<p>The above steps are carried out for each completed ticket. In case of <strong>atomic deployment</strong> if anything goes wrong, we know what is the cause of it as a ticket is generally a small unit of work. In both cases atomic or grouped deployment, <code>master</code> is always the stable branch deployable to production anytime.</p>

<h2>Multiple staging environments</h2>

<p>As we adopted <strong>atomic deployments</strong>, we needed to wait for the staging environment to be free to test our completed ticket(s). Sometimes the wait was more that a day if we had multiple tickets that had higher priority. There by, we devised a new way to make multiple staging deployments possible, how? The basic idea is:</p>

<ol>
<li>Deploy with a <code>standalone</code> deployment flag for the ticket branch let&rsquo;s say <code>cancel-email</code>. (Standalone deployment will mean it will be deployed to a folder on the <code>staging</code> server same as the branch name which is <code>cancel-email</code> in this case.)</li>
<li>To access codebase for this deployed branch (<code>cancel-email</code>), the software engineer who deployed will create a cookie lets say <code>staging-route</code> on the browser with value of the branch name <code>cancel-email</code> and send request from the browser which has this <strong>magic</strong> cookie.</li>
<li>Nginx will read the <code>staging-route</code> cookie if it&rsquo;s not set, it will route the request to the main staging. If the <code>staging-route</code> cookie is set Nginx will route the request to the branch name folder which will be something like <code>/path/to/codebase/cancel-email</code> and not <code>/path/to/codebase/main</code>.</li>
</ol>


<p>Simple yet effective solution to having a single staging problem. We are still improving it to be used in all our use cases, but the basic idea makes it possible to test multiple tickets independently and without waiting for the <strong>main</strong> <code>staging</code> environment to be free. We used <code>cookie</code> to achieve this instead of URL parameters or subdomains because we can do cookie forwarding that works for all our apps which use Nginx or NodeJs.</p>

<h2>Active logging and monitoring</h2>

<p>We are very keen on logging the events that take place in our system for example, if an email is sent notifying a customer about order being shipped, it is logged. As the number of logs is huge, to help ourselves from drowning in the text logs we use some log management and monitoring tools that help both the development team and the sys admins team. We currently use <a href="http://newrelic.com/">NewRelic</a>, <a href="http://graylog2.org/">Graylog2</a> and <a href="https://www.pagerduty.com/">PagerDuty</a> with a mix of some internal notification systems. These useful tools give us a real time view of what is happening on the systems as well as the health report of the systems.</p>

<p>For software engineers, it is always good to know that the code you wrote is behaving properly as you expected, this is where the Reports from NewRelic and the deliberate logs in Graylog come in very handy to know how the code is working.</p>

<h2>Zero Downtime Deployment</h2>

<p>I remember the days around two years back, whenever we deployed to production it would have ~1 minute of downtime (maintenance page) for the files to be pulled and the database migrations to run and other tasks. Now, we see almost no downtime during deployments. It has been possible because of <a href="http://capistranorb.com/">Capistrano</a>. When deploying it performs all the tasks and if all tasks are fine then just switches the symlink to point to the new code resulting in almost zero downtime deployment. For NodeJs we use <a href="http://tech.namshi.com/blog/2014/06/27/clusterjs-clusterify-your-nodejs-applications-and-achieve-zero-downtime-deployments/">clusterjs</a>, which reloads a cluster in place of restarting it and eliminating any downtime without dropping any connection, thus we don&rsquo;t need the maintenance page any more.</p>

<p>Zero Downtime Deployment in case of working system that needs feature upgrade is a shared responsibility between the development team and the sys admins team. In case it&rsquo;s related only to systems like upgrading MYSQL from 5.5 to 5.6, there will be nothing the software engineer can do while the upgrade happens, but before the upgrade the impact analysis should be done where both teams will need to collaborate. There should also be a contingency plan for rollback for each upgrade or new system deployment. Even when working for tickets that need big changes, we as software engineers implementing it should always think about backwards compatibility which can make sure least possible downtime.</p>

<p>If DevOps is about more collaboration and communication between the development team and the sys admins team to achieve higher predictability, maintainability, security and efficiency we are definitely striding to the right direction. We are looking for a <a href="http://tech.namshi.com/join-us/">devOps engineer</a>, if you think we are applying best practices in devOps and you want to join a vibrant team at Namshi get in touch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome Daniel!]]></title>
    <link href="http://namshi.github.io/blog/2014/08/31/welcome-daniel/"/>
    <updated>2014-08-31T21:37:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/08/31/welcome-daniel</id>
    <content type="html"><![CDATA[<p><img class="team left" src="http://namshi.github.io/images/daniel.png"></p>

<p>We are very excited to welcome <a href="http://namshi.github.io/team#Daniel%20Ribeiro">Daniel</a> in
the crazy Namshi family!</p>

<p>Daniel Ribeiro is a Technical Leader, Senior Software Engineer,
PHP 5.3 Zend Certified Engineer (ZEND021458), Speaker and
Evangelist from Brazil. He’s also a member of the local
PHP community (PHPSC), and has been working with software
engineering since 2006. His focus is on software engineering
best practices, both concerning the code and the process of
software development. He has a quite solid experience with agile
practices and leading development teams to enterprise application
standards and practices. Technically, he works with a lot of
best practices, such as Behavior-Driven Development (BDD). He
also has a background on architecture patterns, such as Domain
Driven Design (DDD) and Service Oriented Architecture (SOA). He
loves to work with high quality code, especially concerning
advanced software engineering concepts, such as the SOLID
principles and the GoF design patterns.</p>

<!-- more -->


<p>I am personally very excited as Daniel and me have been
talking about working together for a while, and we finally
managed to get a chance of getting hands down to the code
together!</p>

<p>He will bring good seniority to our team as well as good
knowledge of best practices and enterprise <em>modus operandi</em>;
last but not least, Daniel has been eager to accept the challenge
of taking a closer look at NodeJS as it&rsquo;s getting bigger and
bigger in our stack.</p>

<p>Looking forward to get the brazilian vibes at our desks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Generators explained]]></title>
    <link href="http://namshi.github.io/blog/2014/08/31/php-generators-explained/"/>
    <updated>2014-08-31T13:05:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/08/31/php-generators-explained</id>
    <content type="html"><![CDATA[<p><code>Generators</code> are one of the new cool stuff on <code>PHP 5.5</code>, but it&rsquo;s not a new feature in software programming languages, for example it&rsquo;s on <code>Python</code> since version 2.2 on 2001 and now in the draft <code>ECMAScript</code> 6  (Javascript) specification.</p>

<p>They are a simple and powerful tool for creating <code>iterators</code>. They are like regular functions but using the <code>yield</code> statement whenever they want to return data. A <code>generator</code> looks like a function but behaves like an iterator, it&rsquo;s useful for <code>lazy evaluation</code> &ldquo;which delays the evaluation of an expression until its value is needed&rdquo;.</p>

<!-- more -->


<p>Here are some examples in different languages:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// infinite id generator in JavaScript</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span><span class="o">*</span> <span class="nx">generateId</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">yield</span> <span class="nx">index</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">gen</span> <span class="o">=</span> <span class="nx">idMaker</span><span class="p">();</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">gen</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 0</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">gen</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 1</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">gen</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 2</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">//</span><span class="n">Python</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">generateId</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">num</span> <span class="o">++</span>
</span><span class='line'>
</span><span class='line'><span class="n">count_gen_ids</span> <span class="o">=</span> <span class="n">count</span><span class="p">(</span><span class="n">generateId</span><span class="p">(</span><span class="mi">1000</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">//PHP</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">generateId</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$currentId</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">yield</span> <span class="o">++</span> <span class="nv">$currentId</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nv">$index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$index</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$index</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this examples you would notice that we are using the keyword <code>yield</code> instead of <code>return</code>. <code>return</code> will pass value to the function caller then the function will finish the execution, <code>yield</code> will pass a value then pause the execution of the function &ldquo;which now became a generator&rdquo; till the function caller ask for the next value. Then <code>yield</code> again and again will return values to the function caller.</p>

<p>Using generators is useful in cases where you want iterations on demand, and you will end up with less resources consumption and also still the chance to send some data back to the generator function on any given iteration.</p>

<p>When you have situations that you are fetching large sets of data, you can use generators to <code>lazy load</code> (&ldquo;lazy load is to post pone fetching data till the point that you actually need it) your data sets or doing a lot of computation with big amounts of data.</p>

<p>Imagine that you have the code to execute a query on the database, instead of fetching and returning the whole data at the same time, you can simply return a generator function containing the query cursor that yields one data row at a time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">getUsers</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$dbh</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="s1">&#39;mysql:host=xyz;port=xyz;dbname=xyz&#39;</span><span class="p">,</span> <span class="s1">&#39;[...]&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$stmt</span> <span class="o">=</span> <span class="nv">$dbh</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM users&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="nv">$rs</span> <span class="o">=</span> <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">fetch</span><span class="p">(</span><span class="nx">PDO</span><span class="o">::</span><span class="na">FETCH_OBJ</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>           <span class="nx">yield</span> <span class="nv">$rs</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="nx">finally</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">closeCursor</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$users</span> <span class="o">=</span> <span class="nx">getUsers</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$users</span> <span class="k">as</span> <span class="nv">$user</span><span class="p">){</span>
</span><span class='line'>    <span class="nb">print_r</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Speaking of Javascript, one great usage example for generators is the <a href="http://taskjs.org/">task</a> library, a combination of <a href="http://domenic.me/2012/10/14/youre-missing-the-point-of-promises/"><code>promises</code></a>, and <code>generators</code> to write asynchronous callbacks as beautiful as synchronous code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">go</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="p">{</span> <span class="nx">spawn</span><span class="p">,</span> <span class="nx">join</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">task</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">out</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;out&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">spawn</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">out</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;reading...\n&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="p">[</span> <span class="nx">f1</span><span class="p">,</span> <span class="nx">f2</span> <span class="p">]</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">join</span><span class="p">(</span><span class="nx">read</span><span class="p">(</span><span class="s2">&quot;sleep.html&quot;</span><span class="p">),</span> <span class="nx">read</span><span class="p">(</span><span class="s2">&quot;read.html&quot;</span><span class="p">));</span>
</span><span class='line'>            <span class="nx">out</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="s2">&quot;sleep.html: &quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">f1</span><span class="p">.</span><span class="nx">responseText</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;\n&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">out</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="s2">&quot;read.html: &quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">f2</span><span class="p">.</span><span class="nx">responseText</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;\n&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">e</span><span class="p">.</span><span class="nx">stack</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/\n/</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">line</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">line</span><span class="p">)</span> <span class="p">});</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">out</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;error: &quot;</span> <span class="o">+</span> <span class="nx">e</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally you need to consider some stuff before start using <code>Generator</code>, beware that once it get consumed you cannot reset it, you will need to recall it again.</p>

<p>Also keep resources like db connection and file stream busy on the <code>Generator</code> function could be a problem if you are heavily use this resources and you need to release it as soon as possible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletter #53]]></title>
    <link href="http://namshi.github.io/blog/2014/08/28/newsletter-number-53/"/>
    <updated>2014-08-28T16:11:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/08/28/newsletter-number-53</id>
    <content type="html"><![CDATA[<blockquote><p><strong>BOOM!</strong> As mentioned in the last newsletter, we were working on four new open souce libraries and two of them are already out !!!</p>

<ul>
<li><p><a href="https://github.com/namshi/shisha"><strong>shisha, smoke tests made easy!</strong></a> A cool nodejs library by <a href="http://tech.namshi.com/team/#Shidhin%20CR">Shidhin</a> and <a href="http://tech.namshi.com/team/#Mohamad%20Hallal">Hallal</a> that let&rsquo;s you
write smoke tests in an easy way.</p></li>
<li><p><a href="https://github.com/namshi/node-dock"><strong>node-dock, a sweet remedy for all your docker problems!</strong></a> Another node library by <a href="http://tech.namshi.com/team/#Hossam%20Faris">Hossam</a> and <a href="http://tech.namshi.com/team/##Luciano%20Colosio">Lucio</a> that
has an handy command (dock) that plugs on top of your usual docker commands adding some sugar and some handy functionality on top of it.</p></li>
<li><p>Even <a href="http://tech.namshi.com/team/#Alessandro%20Nadalin">Alex</a> released another tiny and cool node lib called <a href="http://tech.namshi.com/blog/2014/08/22/node-file-ensure-a-small-filesystem-utility-to-make-sure-a-file-is-there/"><strong>node-file-ensure</strong>, a small filesystem utility to make sure a file is there</a></p></li>
<li><p>Lucio also wrote a post detailing his first months here at Namshi: <a href="http://tech.namshi.com/blog/2014/08/27/so-far-dot-dot-dot-so-fun/">check it out</a>!</p></li>
<li><p>Last but not least, <a href="http://tech.namshi.com/team/#Geshan%20Manandhar">Geshan</a> on his vacation back home, has improvised this talk at PHP Developers Meetup Nepal on message queues (AMQP) with RabbitMQ and Symfony <a href="http://mq-talk.herokuapp.com/">http://mq-talk.herokuapp.com/</a></p></li>
</ul>
</blockquote>

<p>And here we are as usual with a list of interesting links to keep you busy during the upcoming weekend:</p>

<ul>
<li><p><a href="https://github.com/OptimalBits/redbird">A modern reverse proxy for node</a></p></li>
<li><p><a href="http://buff.ly/1nEYH2M">Open Source ain’t Charity</a></p></li>
<li><p><a href="https://speakerdeck.com/patrickhamann/ship-it-re-develop-conference-august-2014">Ship it! A story of continuous delivery at theguardian.com</a></p></li>
<li><p><a href="https://www.gov.uk/service-manual/agile/running-retrospectives.html">Reviewing a team&rsquo;s work and the way it is done at Gov.uk Design Services</a></p></li>
<li><p><a href="http://buff.ly/1wDTrGe">Plain Old #JavaScript Object Visualization</a></p></li>
</ul>


<!-- more -->


<ul>
<li><p><a href="http://t.co/eDh0CeQYpA">Stop whatever you are doing and look at p6 of this paper</a></p></li>
<li><p><a href="http://buff.ly/1lrfCus">Rocket Internet co-founder sees venture take off in Middle East</a></p></li>
<li><p><a href="http://buff.ly/1q9KvDq">V8&rsquo;s memory mysteries</a></p></li>
<li><p><a href="http://buff.ly/1sh7Lhn">49ers’ stadium Wi-Fi served 25,000 concurrent users, 2.13TB in all</a></p></li>
<li><p><a href="http://buff.ly/1mA3a6D">Software Developers and Asperger&rsquo;s Syndrome</a></p></li>
<li><p><a href="http://buff.ly/1v8pUmg">Docker Service Discovery Using Etcd and Haproxy</a></p></li>
<li><p><a href="http://buff.ly/1tqNB7a">Stellar: Fast database snapshot and restore tool for development</a></p></li>
<li><p><a href="http://buff.ly/1seRoll">Javascript optimization killers</a></p></li>
<li><p><a href="http://buff.ly/1mz2vlT">How I Hacked My Husband&rsquo;s Programming Addiction</a></p></li>
<li><p><a href="http://mq-talk.herokuapp.com/#/14">programmming mantras to remember</a></p></li>
<li><p><a href="http://buff.ly/1myYCxx">Facebook Unveils Its Load-Balancing System: Autoscale</a></p></li>
<li><p><a href="http://buff.ly/1wiCeln">Docker 1.2.0, with restart policies</a></p></li>
<li><p><a href="http://buff.ly/1lmw8vT">Semantic Versioning Is Not the Solution</a></p></li>
<li><p><a href="http://buff.ly/1mtjtSS">The Plague of Methods and Frameworks</a></p></li>
<li><p><a href="http://buff.ly/1s2pxot">Evolution of Docker and Its Impact on AWS &ndash; i build the cloud</a></p></li>
<li><p><a href="http://buff.ly/1s2p4Cu">Uber opens up its API – and creates a new platform</a></p></li>
<li><p><a href="https://www.glasswire.com">GlassWire Network Security Monitor &amp; Firewall Tool</a></p></li>
<li><p><a href="https://netguru.co/blog/posts/procrastination-and-overcoming-programmers-block">Procrastination and Overcoming Programmer&rsquo;s Block</a></p></li>
<li><p><a href="http://algorithm.dk/posts/rtfm-0day-in-ios-apps-g-gmail-fb-messenger-etc">RTFM 0day in iOS apps: G+, Gmail, FB Messenger</a></p></li>
<li><p><a href="http://www.codefights.com">CodeFights &ndash; Become a Code Champion</a></p></li>
<li><p><a href="http://hoa-project.net/En/">Hoa project, a cool set of PHP lib (they deserve more community involvement &ndash; i.e. tests are missing, own standards)</a></p></li>
<li><p><a href="http://code.tutsplus.com/tutorials/bubblejs-a-16k-solution-to-a-common-problem--cms-21986">Bubble.js: A 1.6K Solution to a Common Problem</a></p></li>
<li><p><a href="http://knplabs.com/blog/2011/05/17/agile-nodejs/">We love Symfony2… but we also love Agility and Node.js</a></p></li>
<li><p><a href="http://www.codeproject.com/Articles/604417/Agile-software-development-methodologies-and-how-t">Agile software development methodologies and how to apply them</a></p></li>
<li><p><a href="http://lafikl.github.io/perfBar/">website performance metrics</a></p></li>
<li><p><a href="https://github.com/OptimalBits/redbird">A modern reverse proxy for node</a></p></li>
<li><p><a href="http://mobileangularui.com/">Mobile Angular UI</a></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
