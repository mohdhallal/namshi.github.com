<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tech @ Namshi.com]]></title>
  <link href="http://namshi.github.io/atom.xml" rel="self"/>
  <link href="http://namshi.github.io/"/>
  <updated>2014-10-30T15:41:38+04:00</updated>
  <id>http://namshi.github.io/</id>
  <author>
    <name><![CDATA[Namshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Newsletter #62]]></title>
    <link href="http://namshi.github.io/blog/2014/10/30/newsletter-number-62/"/>
    <updated>2014-10-30T11:09:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/10/30/newsletter-number-62</id>
    <content type="html"><![CDATA[<p>Hey folks!</p>

<p>It&rsquo;s <a href="http://namshi.github.io/blog/categories/techthursday/">#TechThursday</a> at <a href="http://twitter.com/techNamshi">#namshi</a>!</p>

<blockquote><p>News from the IT Team:</p>

<p>Namshi is now maintaining <a href="https://github.com/namshi/winston-graylog2">winston-graylog2</a>! <a href="">Lucio</a> just merged the first PR!</p>

<p><a href="http://tech.namshi.com/team/#Alessandro%20Cinelli%20(cirpo)">Cirpo</a> just came back from Munich after giving two interesting talks, read all about it <a href="http://tech.namshi.com/blog/2014/10/30/ipc14-wtc14-munich/">here</a>!</p>

<p><a href="http://tech.namshi.com/team/#Alessandro%20Nadalin">Alex</a> will be hitting <a href="http://madrid2014.symfony.com/speakers">SymfonyCon Madrid</a>
on November 27-29. He will talk about Namshi&rsquo;s experience with AngularJs!</p></blockquote>

<p><strong>Here is the list with awesome links to keep you busy during the weekend:</strong></p>

<ul>
<li><p><a href="http://osquery.io/">SQL powered operating system instrumentation and analytics.</a></p></li>
<li><p><a href="http://www.regexper.com/">Regexper: a good way to visualize your regex</a></p></li>
<li><p><a href="http://monkey.org/~marius/unix-tools-hints.html?">Hints for writing Unix tools</a></p></li>
</ul>


<!-- more -->


<ul>
<li><p><a href="http://jonathan.bergknoff.com/journal/building-good-docker-images">Building good docker images</a></p></li>
<li><p><a href="http://bit.ly/1weC6l8">Why Open Source Is Becoming A Big Developer-Recruiting Tool</a></p></li>
<li><p>[React (and why it’s awesome) &ndash; Slides] (<a href="http://bit.ly/1yIRgyv">http://bit.ly/1yIRgyv</a>)</p></li>
<li><p><a href="http://bit.ly/10ApTLP">4 Biggest Reasons Why Software Developers Suck at Estimation</a></p></li>
<li><p><a href="http://davidwalsh.name/for-and-against-let">For and Against ‘Let’ in ES6</a></p></li>
<li><p><a href="https://github.com/enaqx/awesome-react">A collection of awesome React libraries, resources and shiny things.</a></p></li>
<li><p><a href="http://www.andrewconnell.com/blog/atscript-another-language-to-compile-down-to-javascript">AtScript &ndash; Another Language to Compile Down to JavaScript?</a></p></li>
<li><p><a href="https://medium.com/@garychambers108/understanding-flux-f93e9f650af7">Understanding Flux Architecture</a></p></li>
<li><p><a href="http://blog.pascal-martin.fr/post/php-versions-stats-2014-10-en">PHP versions stats &ndash; Oct 2014: >70% of installs are unmaintained versions!</a></p></li>
<li><p><a href="http://blog.ircmaxell.com/2014/10/foundations-of-oo-design.html?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+Ircmaxell+%28ircmaxell%29">Foundation of OOP design</a></p></li>
<li><p><a href="https://blog.engineyard.com/2014/on-love-open-course-and-community">On love, open source and community</a></p></li>
<li><p><a href="https://github.com/virtkick/virtkick">VirtKick is a simple, open source orchestrator for managing virtual machines and Docker containers.</a></p></li>
<li><p><a href="https://www.atatus.com/">Atatus: Frontend JavaScript Contextual Error Tracking &ndash; See which user actions triggered your frontend errors.</a></p></li>
<li><p><a href="https://humongous.io/">Humongous.io: mongoDB User Interface</a></p></li>
<li><p><a href="http://contribsys.com/inspeqtor/">Inspeqtor: Easy application infrastructure monitoring</a></p></li>
<li><p><a href="http://lwan.ws/">Lwan: Experimental, scalable, high performance HTTP server</a></p></li>
<li><p><a href="http://www.javaworld.com/article/2840332/html-css-js/next-up-for-node-js-going-mobile.html">Next up for Node.js: Going mobile</a></p></li>
<li><p><a href="https://ahmetalpbalkan.com/blog/docker-http-basic-auth/">Securing Docker with HTTP Basic Authentication</a></p></li>
<li><p><a href="http://tylermcginnis.com/angularjs-factory-vs-service-vs-provider/">AngularJS: Factory vs Service vs Provider</a></p></li>
<li><p><a href="http://java.dzone.com/articles/docker-rabbitmq-cluster">Docker RabbitMQ Cluster</a></p></li>
<li><p><a href="http://ropensci.org/blog/2014/10/23/introducing-rocker/">Introducing Rocker: Docker for R</a></p></li>
<li><p><a href="https://clusterhq.com/blog/deploying-multi-node-elasticsearch-logstash-kibana-cluster-using-docker/">Deploying and migrating a multi-node ElasticSearch-Logstash-Kibana cluster using Docker</a></p></li>
<li><p><a href="https://www.linkedin.com/today/post/article/20141027200232-1485298-why-i-left-my-254-895-pm-role-at-microsoft-to-start-a-seattle-tech-startup">Why I left my $254,895 PM role at Microsoft to start a Seattle tech startup</a></p></li>
<li><p><a href="http://nginx.com/blog/deploying-nginx-nginx-plus-docker/">Deploying NGINX and NGINX Plus with Docker</a></p></li>
<li><p><a href="http://jonathan.bergknoff.com/journal/building-good-docker-images">What constitutes a good docker image</a></p></li>
<li><p><a href="http://www.infoworld.com/article/2838008/javascript/nginx-has-big-plans-for-javascript.html">Nginx has big plans for JavaScript</a></p></li>
<li><p><a href="http://flapjack.io/">flapjack: monitoring notification routing + event processing system</a></p></li>
<li><p><a href="http://venturebeat.com/2013/11/08/the-future-of-web-apps-is-ready-isomorphic-javascript/">The future of web apps is — ready? — isomorphic JavaScript</a></p></li>
<li><p><a href="http://berzniz.com/post/98422338286/ocd-js-javascript-obsessive-compulsive-disorder">OCD.JS: JavaScript Obsessive-Compulsive disorder</a></p></li>
<li><p><a href="https://readme.io/">Beautiful Documentation made easy</a></p></li>
<li><p><a href="https://nakedsecurity.sophos.com/2014/10/24/do-we-really-need-strong-passwords">Do we really need strong passwords?</a></p></li>
<li><p><a href="http://www.infoworld.com/article/2838799/node-js/next-up-for-nodejs-going-mobile.html">Next up for NodeJs, going mobile</a></p></li>
<li><p><a href="http://www.elasticsearchtutorial.com/elasticsearch-in-5-minutes.html">ElasticSearch in 5 minutes</a></p></li>
<li><p><a href="http://www.elasticsearch.org/blog/kibana-3-0-0-ga-now-available/">Kibana 3.0.0 GA is now available!</a></p></li>
<li><p><a href="https://www.joyent.com/blog/node-js-advisory-board">Node gets an advisory board</a></p></li>
<li><p><a href="http://blog.nodejs.org/2014/10/23/node-v0-10-33-stable/">And don&rsquo;t forget to update your nodes to the 0.10.33!!</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Year and a Half journey with Namshi Tech]]></title>
    <link href="http://namshi.github.io/blog/2014/10/30/a-year-and-a-half-journey-with-namshi-tech/"/>
    <updated>2014-10-30T09:48:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/10/30/a-year-and-a-half-journey-with-namshi-tech</id>
    <content type="html"><![CDATA[<p>Today, I bed farewell to the team and the culture that introduced me to software development. A year and six months have passed since I
landed my first job straight out of college as a Junior Software Engineer at Namshi where I had the great, the average and the bad
days. I must admit, time has passed super fast.</p>

<!--more-->


<p>It was a very exciting journey, from completing my first assignment, changing <code>robots.txt</code> :&ndash;), to the latest extra large,
super complicated tasks, it was a journey involving lots and lots of learning and late working hours.</p>

<p>I was lucky to join Namshi Tech at a time where migration to a more sustainable, robust and scalable architecture was
taking place. After a little bit of struggling with completing assignments on legacy software, Symfony2 kicked in and
paved the way of my learning path and ended up to be my most valuable experience. Javascript for me was that nice
language I used to manipulate DOM elements, I could not be more wrong! After finally understanding what a directive is supposed to be,
I started working with AngularJs and I couldn&rsquo;t help but be amazed on what it can achieve. Fighting and watching my
teammates fight through the craziness of Javascript, NodeJs came into the picture and my first impression was exactly
as you might think, this javascript craziness on the server?! But the simplicity and the ultimate performance of this
platform proved me wrong again.</p>

<p>The newly employed technologies brought with them a set of valuable practices like code review, code testing and
automated testing tools, pair programming and many more which are very important skills for a software developer to pick up.</p>

<p>Attending SymfonyLive London 2014 was a great chance to meet people from the Symfony and PHP community, getting to know
the latest trends surrounding this framework and most importantly, realizing that there are people across continents
facing the same issues and struggling through the same parts you had hard time working on. The level of passion towards
software is just fascinating!</p>

<p>One of the most valuable lessons I learned was that paying back to the open source community is an important part of
our job as software developers. During this period at Namshi, I had the chance to participate in <a href="https://www.npmjs.org/package/mockserver">Mockserver</a>
and <a href="https://www.npmjs.org/package/shisha">shisha</a>.</p>

<p>Finally, words of gratitude go to <a href="http://tech.namshi.com/team/#Alessandro%20Nadalin">Alessandro Nadalin</a> for taking a
leap of faith in hiring a fresh graduate and going through the painful process of developing him from scratch.
I just hope I set a right example. Of course, lots of thanks to the team and to <a href="http://tech.namshi.com/team/#Alessandro%20Cinelli%20(cirpo">Alessandro Cinelli</a>)
for sharing their knowledge and their guidance along the way.</p>

<p><img class="center" src="http://namshi.github.io/images/wall.jpg" title="On the Namshi Wall" alt="On the Namshi Wall"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Namshi went to Germany!<br>WebTechCon and International PHPConference 2014]]></title>
    <link href="http://namshi.github.io/blog/2014/10/30/ipc14-wtc14-munich/"/>
    <updated>2014-10-30T06:51:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/10/30/ipc14-wtc14-munich</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://namshi.github.io/images/posts/webtech14-ipc14.png" width="320" height="320" title="WebTechCon" alt="WebTechCon"></p>

<p>I had the opportunity to attend the <a href="http://webtechcon.de/2014/">WebTechCon</a> and the <a href="https://phpconference.com/2014">International PHPConference 2014</a> as speaker in Munich, Germany.
The location was very nice, and beeing a foodie, the food was great :).</p>

<p>The only small complaint I have is that in 2014, Tech conference should be in English: I missed a lot of potentially great talks because they were in German.</p>

<p>The International PHP Conference is the world&rsquo;s first PHP conference and stands since more than a decade while the WebTechCon is taking place
since the last 5 years.
The fact that you have these two events combined confirms the trend of horizontal events rather than focusing on just
one technology or product.
Lots of different topics were covered: PHP, Javascript, HTML5, AngularJs, databases, devops, systems, automation, architecture etc.</p>

<p>The concept of an heterogeneous technologies integration was addressed during the opening keynote and was a topic covered in many talks, mine were no exception.</p>

<p>I presented two talks: <a href="http://www.slideshare.net/cirpo/don-t-screw-it-up-how-to-build-durable-api">&ldquo;Don&rsquo;t screw it up! How to build durable API&rdquo;</a> and <a href="http://www.slideshare.net/cirpo/php-is-the-king-nodejs-is-the-prince-and-lua-is-the-fool">&ldquo;PHP is the king, nodejs the prince and Lua the fool&rdquo;</a>.</p>

<p>Both talks are based on the experience at Namshi, building our current service oriented architecture and API and how our stack is evolving.</p>

<iframe src="http://namshi.github.io//www.slideshare.net/slideshow/embed_code/40808376" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> </div></p>

<iframe src="http://namshi.github.io//www.slideshare.net/slideshow/embed_code/40818800" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px">  </div></p>

<p>At Namshi we believe that attending conferences and meetups is a very important as that helps the team and the individual developers grow.
It&rsquo;s a great opportunity to understand what&rsquo;s going on in our field and to meet other great developers.</p>

<p>What&rsquo;s next? If you&rsquo;re attending <a href="http://madrid2014.symfony.com/">SymfonyCon Madrid</a>, don&rsquo;t miss <a href="http://madrid2014.symfony.com/speakers">&ldquo;Hey, I just met AngularJS, and this is crazy, so here’s my JavaScript, let’s use it maybe&rdquo;</a> by <a href="http://tech.namshi.com/team/#Alessandro%20Nadalin">Alex</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[winston-graylog2: a new life under Namshi]]></title>
    <link href="http://namshi.github.io/blog/2014/10/27/winston-graylog2-a-new-life-under-namshi/"/>
    <updated>2014-10-27T10:32:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/10/27/winston-graylog2-a-new-life-under-namshi</id>
    <content type="html"><![CDATA[<p>As our herd of node.js apps grows, we soon needed a way to keep an eye on them.
Having already in out tool belt a <a href="http://www.graylog2.org/">graylog2</a> facility in place, looking for a way to leverage it was the most natural thing to do.</p>

<p>Because of its nice modular <code>transports feature</code> our node-logging weapon of choice is <a href="https://github.com/flatiron/winston">winston</a>, the <code>graylog2</code> transport library looked a bit alone though and in need of a maintainer.
I our usual <strong>give back</strong> spirit we choose to adopt the lib instead of publishing a new one, and today we merged our 1st PR! :)</p>

<p>As for now our intervention was isolated to move away from the custom GELF protocol implementation, relying instead on the <a href="https://github.com/Wizcorp/node-graylog2">node-graylog2</a> library:
they&rsquo;ll most likely do a better job than us on the protocol side, and we&rsquo;ll be able to focus more on the winston integration.
We also started introducing some basic tests: definitely some better work can be done on this side ;)</p>

<p>So here it is: <a href="https://github.com/namshi/winston-graylog2">winston-graylog2</a>
and here&rsquo;s briefly how you use it:</p>

<p>the usual</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install winston-graylog2
</span></code></pre></td></tr></table></div></figure>


<p>and then</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">winston</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;winston&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">winston</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;winston-graylog2&#39;</span><span class="p">),</span> <span class="nx">options</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">WinstonGraylog2</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;winston-graylog2&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">logger</span> <span class="o">=</span> <span class="k">new</span><span class="p">(</span><span class="nx">winston</span><span class="p">.</span><span class="nx">Logger</span><span class="p">)({</span>
</span><span class='line'>        <span class="nx">exitOnError</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">transports</span><span class="o">:</span> <span class="p">[</span><span class="k">new</span><span class="p">(</span><span class="nx">WinstonGraylog2</span><span class="p">)(</span><span class="nx">options</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enjoy! :)</p>

<p>Publishing something new is always a great feeling, and it&rsquo;s even more fulfilling when it involves not letting a project die :)<br> So let us know if you like it and share the love with some RP!!!! ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletter #61]]></title>
    <link href="http://namshi.github.io/blog/2014/10/23/newsletter-number-61/"/>
    <updated>2014-10-23T12:17:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/10/23/newsletter-number-61</id>
    <content type="html"><![CDATA[<p>Hey folks!</p>

<p>It&rsquo;s <a href="http://namshi.github.io/blog/categories/techthursday/">#TechThursday</a> at <a href="http://twitter.com/techNamshi">#namshi</a>!</p>

<blockquote><p>Thanks to <a href="https://github.com/shidhincr">Shidhin</a>, we have a shiny new blog theme! Also, he wrote an incredible
<a href="http://tech.namshi.com/blog/2014/10/19/welcome-es6-javascript-is-not-fancy-anymore/">blog post</a> about Javascript ES6,
you should check it out!</p></blockquote>

<p><strong>Here is the list with awesome links to keep you busy during the weekend:</strong></p>

<ul>
<li><p><a href="http://www.smashingmagazine.com/2014/10/21/providing-a-native-experience-with-web-technologies/">Hybrid Mobile Apps: Providing A Native Experience With Web Technologies</a></p></li>
<li><p><a href="http://strongloop.com/strongblog/modular-node-js-express/">Writing Modular Node.js Projects for Express and Beyond</a></p></li>
<li><p><a href="https://github.com/mosaicxm/vagrant-hostmaster">Vagrant plugin to manage /etc/hosts entries on both the host OS and guest VMs</a></p></li>
<li><p><a href="https://github.com/sameersbn/docker-extras">Helper scripts for everyday docker use</a></p></li>
<li><p><a href="http://reqr.es/">Reqres &ndash; A hosted REST-API ready to respond to your AJAX requests</a></p></li>
</ul>


<!-- more -->


<ul>
<li><p><a href="http://www.dzone.com/links/r/4_programming_languages_with_the_potential_to_rev.html">4 Programming Languages with the Potential to Revolutionize the World of Programming</a></p></li>
<li><p><a href="http://arstechnica.com/information-technology/2014/10/ten-years-of-ubuntu-how-linuxs-beloved-newcomer-became-its-criticized-king/">Ten years of Ubuntu: How Linux&rsquo;s beloved newcomer became its criticized king</a></p></li>
<li><p><a href="http://www.yegor256.com/2014/09/09/restful-web-sites.html">RESTful API and a Web Site in the same URL</a></p></li>
<li><p><a href="http://blog.npmjs.org/post/100099402720/registry-roadmap">Fixing Npm: Registry roadmap</a></p></li>
<li><p><a href="http://www.sitepoint.com/preparing-ecmascript-6-new-number-methods/">ES6 new Numbers</a></p></li>
<li><p><a href="https://github.com/danielstjules/jsinspect">Jsinspect: detect your duplicate code before is too late</a></p></li>
<li><p><a href="http://scotch.io/bar-talk/the-future-of-expressjs-and-alternatives">The Future of ExpressJS and Alternatives</a></p></li>
<li><p><a href="http://dorey.github.io/JavaScript-Equality-Table/">JavaScript Equality Table</a></p></li>
<li><p><a href="http://www.smashingmagazine.com/2012/10/09/designing-javascript-apis-usability/">Useful Principles for Creating Simple and Flexible JavaScript APIs</a></p></li>
<li><p><a href="http://jsdatav.is/intro.html">Data Visualization with JavaScript</a></p></li>
<li><p><a href="http://jhusain.github.io/learnrx/">Functional Programming in JavaScript: A Collection of Hands-on Exercises</a></p></li>
<li><p><a href="http://www.benhowell.net/guide/2014/06/20/multithreaded-javascript-using-nashorn/">Multithreaded Javascript using Nashorn</a></p></li>
<li><p><a href="http://paasifier.herokuapp.com/">Find the best PaaS for your applications</a></p></li>
<li><p><a href="http://symfony.com/blog/the-symfony-project-turns-9">Symfony project turns 9!</a></p></li>
<li><p><a href="http://notebook.ideapublic.org/2014/one-less-password">One Less Password</a></p></li>
<li><p><a href="http://swarmjs.github.io/articles/todomvc">Swarm.js+React — real-time, offline-ready Holy Grail web apps</a></p></li>
<li><p><a href="http://mozilla.github.io/nunjucks">A rich and powerful templating language for JavaScript.</a></p></li>
<li><p><a href="http://arqex.com/939/learning-much-javascript-one-line-cod">Learning much javascript from one line of code</a></p></li>
<li><p><a href="http://www.theepochtimes.com/n3/1031947-5-deadly-linux-commands-you-should-never-run/">5 Deadly Linux Commands You Should Never Run</a></p></li>
<li><p><a href="http://blog.codeship.io/2014/10/21/proper-server-naming-scheme.html">A Proper Server Naming Scheme</a></p></li>
<li><p><a href="http://blog.iron.io/2014/10/docker-in-production-what-weve-learned.html">Docker in Production — What We’ve Learned Launching Over 300 Million Containers</a></p></li>
<li><p><a href="https://hashicorp.com/blog/introducing-consul-template.html">Introducing Consul Template</a></p></li>
<li><p><a href="https://github.com/romansanchez/Calaca">Search UI for Elasticsearch</a></p></li>
<li><p><a href="http://utcc.utoronto.ca/~cks/space/blog/web/VegetaLoadTesting">Vegeta, a tool for web server stress testing</a></p></li>
<li><p><a href="https://sslmate.com/">Buy SSL certs from the command line</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome ES6 ! JavaScript is not fancy anymore]]></title>
    <link href="http://namshi.github.io/blog/2014/10/19/welcome-es6-javascript-is-not-fancy-anymore/"/>
    <updated>2014-10-19T12:04:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/10/19/welcome-es6-javascript-is-not-fancy-anymore</id>
    <content type="html"><![CDATA[<blockquote><p><strong>21/10/2014 UPDATE:</strong> This post was updated ( see the new examples for arrow functions and template strings ).</p>

<p>Thanks for the <a href="http://localhost:4000/blog/2014/10/19/welcome-es6-javascript-is-not-fancy-anymore/#disqus_thread">comments</a>
and the <a href="http://www.reddit.com/r/javascript/comments/2jr72y/welcome_es6_javascript_is_not_fancy_anymore/">Reddit discussion</a>.</p></blockquote>

<h2></h2>

<p>For years, JavaScript was considered as a toy language. It was used for creating interactive web pages and could run only in the browser. But, things changed; JavaScript is used in both, the server and the browser these days. The simplicity of the language made it so popular that developers started using it for large and complex projects.</p>

<p>However, new developers felt JavaScript was fancy at times. This was because of some of the known drawbacks in the language itself &mdash; and the workarounds put in place for fixing them. For example, a developer from a &ldquo;C&rdquo; language background is more familiar to block level scoping, but will have difficulties understanding function scoping in JavaScript. Along with lexical scoping, variable hoisting and closures might seem fancy or difficult to understand as well.</p>

<!--more-->


<p>ES6, the future version, is going to give a vast makeover to JavaScript. The <strong>TC39</strong> committee (responsible for ES6 standardization) have taken care of most of the concerns about JavaScript, and now ES6 is getting a lot of new features added, and existing bad parts fixed. If you want to know about the JavaScript good vs bad parts, check out Douglas Crockford’s book <a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript, the Good Parts</a>.</p>

<p>This post is <strong>not</strong> about the complete ES6 feature-set. Here, we will see some of the areas of JavaScript that look fancy, and how they are getting improved in ES6.</p>

<h2>ES6, all good parts?</h2>

<p>Again, I am not saying ES6 has only good parts. To be honest, I don&rsquo;t know. ES6 is not completely ready for live applications. Design patterns will automatically evolve once the language is used extensively. Design patterns can distinguish between the good and bad parts.</p>

<p>As of now, most ES6 features are not supported by browsers (as they’re in draft). We use transpiler tools to compile ES6 code to ES5. While there are many tools available, Google’s <a href="https://github.com/google/traceur-compiler">traceur</a> seems to be the most popular among them.</p>

<h2>8 fancy things fixed in ES6</h2>

<p>Here are some interesting improvements done in ES6:</p>

<h3>Object.is for better comparison</h3>

<p>New developers who learn JavaScript often stumble on the usage of <code>==</code> and <code>===</code>.  The <code>===</code> is a strict comparison operator where it checks the type of the operands also. For example, in this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">“</span><span class="mi">0</span><span class="err">”</span> <span class="o">==</span> <span class="mi">0</span>  <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'><span class="nx">but</span>
</span><span class='line'>
</span><span class='line'><span class="err">“</span><span class="mi">0</span><span class="err">”</span> <span class="o">===</span> <span class="mi">0</span> <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is always recommended to use the <code>===</code> operator. However, there is an excepton to this; we cannot compare <code>NaN</code> using any of these operators. We need to use the global function <code>isNaN</code> to check if any variable has a <code>NaN</code> value or not.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kc">NaN</span> <span class="o">==</span> <span class="kc">NaN</span>  <span class="c1">// false</span>
</span><span class='line'><span class="kc">NaN</span> <span class="o">===</span> <span class="kc">NaN</span>  <span class="c1">// false</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">isNan</span><span class="p">(</span><span class="kc">NaN</span><span class="p">)</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Object.is</code> is an attempt to have a better comparison method. It is the same as the <code>===</code> operator, except it can compare <code>NaN</code> also.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="mi">0</span> <span class="p">,</span><span class="err">”</span><span class="mi">0</span><span class="err">”</span><span class="p">)</span> <span class="c1">// false</span>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="mi">0</span> <span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="c1">// true</span>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="kc">NaN</span><span class="p">,</span> <span class="kc">NaN</span><span class="p">)</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Let for block scoping.</h3>

<p>As opposed to languages like &ldquo;C&rdquo;, JavaScript doesn&rsquo;t have block scoping. All variables inside a block are hoisted to its containing function (if any) or will be part of the global scope.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span><span class="p">(</span><span class="kc">true</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// 10</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// outside the if block</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// a is accessible here also and prints 10</span>
</span></code></pre></td></tr></table></div></figure>


<p>Following is a popular example of this:</p>

<p>Assume that we have 10 anchor tags in an html page. We need to alert the index of each anchor tag whenever it’s clicked. Now, look at the code below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">anchors</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="err">“</span><span class="nx">a</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">len</span><span class="o">=</span><span class="nx">anchors</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">anchors</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we think the above code works, we are wrong. It is the last value of <code>i</code> that is alerted. Here we will see <strong>10</strong> getting alerted.</p>

<p>We use a <strong>closure</strong> to fix this problem. Using closure, we can bind the right value of <code>i</code> to the onClick handler. See the code below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">anchors</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="err">“</span><span class="nx">a</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">len</span><span class="o">=</span><span class="nx">anchors</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">anchors</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="nx">alert</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">})(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Having a closure in the above code makes it unreadable and totally fancy to a new developer. Now we know why the word <strong>&ldquo;fancy&rdquo;</strong> is here.</p>

<p>ES6 introduces block scoping in JavaScript using the keyword <code>let</code>. If we write our first example, using <code>let</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span><span class="p">(</span><span class="kc">true</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// 10</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// outside the if block</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// Reference error: a is not defined</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>let</code> also binds the scope of the variable to the current block. In our second example, we can use <code>let</code> to solve the scoping problem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">anchors</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="err">“</span><span class="nx">a</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">len</span><span class="o">=</span><span class="nx">anchors</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">anchors</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the above code should work as expected.</p>

<h3>Multi-line strings and string interpolations</h3>

<p>Writing multiline strings is not so straightforward. The <code>\n</code> ( for newline ) has to be added where ever a line break is needed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myString</span> <span class="o">=</span> <span class="s1">&#39;Lorem ipsum \ndolor sit amet,\n\n\n consectetur adipisicing\n elit.&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ES6 introduces <strong>template strings</strong> for creating multiline strings. In ES6, we can write the above example like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myString</span> <span class="o">=</span> <span class="err">`</span><span class="nx">Lorem</span> <span class="nx">ipsum</span>
</span><span class='line'>                <span class="nx">dolor</span> <span class="nx">sit</span> <span class="nx">amet</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">consectetur</span> <span class="nx">adipisicing</span>
</span><span class='line'>                <span class="nx">elit</span><span class="p">.</span><span class="err">`</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, here, we can use &ldquo;`&rdquo; (backtick) to create the strings.</p>

<p>Another interesting usecase of the template strings is variable interpolation. There is no native variable interpolation in ES5, but can be achieved by regular expressions or by manually appending the variable to the string. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Using + operator </span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;Tony&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">greeting</span> <span class="o">=</span> <span class="s1">&#39;Hi, I am &#39;</span><span class="o">+</span><span class="nx">name</span><span class="o">+</span><span class="s1">&#39; and my age is &#39;</span><span class="o">+</span><span class="nx">age</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greeting</span><span class="p">);</span> <span class="c1">// This prints &#39;Hi I am Tony and my age is 20&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Using regular expressions</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">greeting</span> <span class="o">=</span> <span class="s1">&#39;Hi, I am %name% and my age is %age%&#39;</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/%name%/g</span><span class="p">,</span><span class="nx">name</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/%age%/g</span><span class="p">,</span><span class="nx">age</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greeting</span><span class="p">);</span> <span class="c1">// This prints &#39;Hi I am Tony and my age is 20&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In ES6, the above code is really simplified, and can be written like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;Tony&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">greeting</span> <span class="o">=</span> <span class="err">`</span><span class="nx">Hi</span><span class="p">,</span> <span class="nx">I</span> <span class="nx">am</span> <span class="nx">$</span><span class="p">{</span><span class="nx">name</span><span class="p">}</span> <span class="nx">and</span> <span class="nx">my</span> <span class="nx">age</span> <span class="nx">is</span> <span class="nx">$</span><span class="p">{</span><span class="nx">age</span><span class="p">}</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greeting</span><span class="p">);</span> <span class="c1">// This prints &#39;Hi I am Tony and my age is 20&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Fat Arrow functions for binding scope</h3>

<p>Most new developers struggle to understand the <code>this</code> keyword in JavaScript. <code>this</code> is nothing but the execution context for a function, and for methods, <code>this</code> points to the object holding it. If the function is executed not as a method of an object, <code>this</code> will point to the global object (usually the window object).</p>

<p><code>this</code> can be confusing many times. Look at the below example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;Tom&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Jerry&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">sayName</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">greet</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>       <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>           <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hi,&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="p">);</span>
</span><span class='line'>       <span class="p">},</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">sayName</span><span class="p">();</span> <span class="c1">// logs Jerry</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">greet</span><span class="p">();</span> <span class="c1">// logs Hi, Tom</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the <code>sayName</code> is executed as an object method, <code>this</code> was pointing to object itself, so <code>this.name</code> will output &ldquo;Jerry&rdquo;. Inside the <code>greet</code> function, a <code>setTimeout</code> is used for delaying the function execution. <code>setTimeout</code> will invoke the function in global context, hence <code>this</code> will point to the global object.</p>

<p>We usually use <code>Function.bind</code> or <code>Function.call</code> or <code>Function.apply</code> to fix these kinds of problems.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;Tom&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Jerry&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">sayName</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">greet</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>       <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>           <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hi,&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="p">);</span>
</span><span class='line'>       <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">sayName</span><span class="p">();</span> <span class="c1">// logs Jerry</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">greet</span><span class="p">();</span> <span class="c1">// logs Hi, Jerry</span>
</span></code></pre></td></tr></table></div></figure>


<p>ES6 added arrow functions to get rid of scoping issues. An arrow function will always lexically bind the <code>this</code> value to its surrounding environment. So the above code can be written in ES6 like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;Tom&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Jerry&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">sayName</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">greet</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>       <span class="nx">setTimeout</span><span class="p">(</span> <span class="p">()</span><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>           <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hi,&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="p">);</span>
</span><span class='line'>       <span class="p">},</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">sayName</span><span class="p">();</span> <span class="c1">// logs Jerry</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">greet</span><span class="p">();</span> <span class="c1">// logs Hi, Jerry</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, inside the arrow function, <code>this</code> always points to the parent scope <code>this</code> value.</p>

<p><strong>Note:</strong> <em>Since the arrow function is already bound to its execution context, we cannot apply .bind(), .call() or .apply() methods on it again.</em></p>

<h3>Destructuring</h3>

<p>Destructuring is the process of assigning the property values of an object to a local variable. For example, in JavaScript, we can do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myGlobalConfig</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">apiUrl</span><span class="o">:</span> <span class="s1">&#39;www.google.com/api&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">data1</span><span class="o">:</span> <span class="s1">&#39;some value&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">data2</span><span class="o">:</span> <span class="s1">&#39;another value&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">methodType</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span>
</span><span class='line'>    <span class="c1">// ... etc</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// and in one of our functions</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">makeAjaxRequest</span><span class="p">(</span><span class="nx">config</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">url</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">method</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">methodType</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">data2</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">method</span><span class="p">,</span> <span class="nx">data</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// call makeAjaxRequest</span>
</span><span class='line'><span class="nx">makeAjaxRequest</span><span class="p">(</span> <span class="nx">myGlobalConfig</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above code, whenever a function requires arguments as multiple parameters, we need to extract values from our config object and pass them as parameters. This is a problem when we have a large number of values that need to be extracted.</p>

<p>ES6 allows direct destructing assignments. So we can write the above example in a simple way, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myGlobalConfig</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">apiUrl</span><span class="o">:</span> <span class="s1">&#39;www.google.com/api&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">data1</span><span class="o">:</span> <span class="s1">&#39;some value&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">data2</span><span class="o">:</span> <span class="s1">&#39;another value&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">methodType</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span>
</span><span class='line'>    <span class="c1">// ... etc</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// and in one of our function</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">makeAjaxRequest</span><span class="p">(</span><span class="nx">config</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="p">{</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">methodType</span><span class="p">,</span> <span class="nx">data2</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">methodType</span><span class="p">,</span> <span class="nx">data2</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// call makeAjaxRequest</span>
</span><span class='line'><span class="nx">makeAjaxRequest</span><span class="p">(</span> <span class="nx">myGlobalConfig</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Default Argument Values for Functions</h3>

<p>One of the best features in ES6 is default arguments. As of now, we use the <code>||</code> to have default values for the function parameters. See the below code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myFunction</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">||</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">b</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">||</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">c</span> <span class="o">=</span> <span class="nx">c</span> <span class="o">||</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the same code written in ES6:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myFunction</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="nx">b</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="nx">c</span><span class="o">=</span><span class="mi">8</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Object method shorthands</h3>

<p>Look at the below object creation pattern. In this, all the public method/property of an object will have their own private counterparts. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">sayName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;this is sayname function&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">greet</span> <span class="o">=</span> <span class="s1">&#39;This is a greeting&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">greet</span><span class="o">:</span> <span class="nx">greet</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">sayName</span><span class="o">:</span> <span class="nx">sayName</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above pattern is called <strong>Revealing module pattern</strong>. In ES6, it is much simplified by eliminating the column part. Thus, we can write the above code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">sayName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;this is sayname function&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">greet</span> <span class="o">=</span> <span class="s1">&#39;This is a greeting&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">greet</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">sayName</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The super keyword for invoking super class methods</h3>

<p>JavaScript supports object oriented programming. But, implementing inheritance is tricky in JavaScript, as it is not supported natively. JavaScript even has the <code>super</code> keyword, however, it is not functional.</p>

<p>Most of the JavaScript frameworks those implement inheritance have a pattern like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myBaseObj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sayName</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="c1">// .. do something</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">mySubObj</span> <span class="o">=</span> <span class="nx">Framework</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">myBaseObj</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sayName</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_super</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// .. do something else</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>These frameworks use <code>_super</code> (or sometimes <code>uber</code>) to invoke the parent method. This is because, <code>super</code> was a reserved keyword (for the future) in JavaScript, and is not allowed for use as an identifier or method.</p>

<p>Now, the &ldquo;future&rdquo; has come. JavaScript&rsquo;s <code>super</code> keyword has been implemented in ES6. Now let&rsquo;s see how inheritance can be done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myBaseObj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sayName</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="c1">// .. do something</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mySubObj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">__proto__</span><span class="o">:</span> <span class="nx">myBaseObj</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">sayName</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="kr">super</span><span class="p">.</span><span class="nx">sayName</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">// .. do something else</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, all these are just a small part of the ES6 feature-set. There are so many interesting features like Promises, Classes, Generator, Iterators, etc.</p>

<h2>Summary</h2>

<p>ES6 is the most promising version of JavaScript. It has so many features; features we were waiting for for years. ES6 will definitely help writing more modular and less quirky code in JavaScript.</p>

<p>Here in this article, we have seen the problems with the current version of JavaScript, and how ES6 fixes the problems and the workarounds. Now, the entire ES6 feature-set is beyond the scope of this post, for that you can check out these awesome resources.</p>

<ul>
<li><a href="https://github.com/lukehoban/es6features">https://github.com/lukehoban/es6features</a></li>
<li><a href="https://github.com/ericdouglas/ES6-Learning">https://github.com/ericdouglas/ES6-Learning</a></li>
<li><a href="http://espadrine.github.io/New-In-A-Spec/es6/">http://espadrine.github.io/New-In-A-Spec/es6/</a></li>
<li><a href="http://tc39wiki.calculist.org/es6/">http://tc39wiki.calculist.org/es6/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletter #60]]></title>
    <link href="http://namshi.github.io/blog/2014/10/16/newsletter-number-60/"/>
    <updated>2014-10-16T12:52:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/10/16/newsletter-number-60</id>
    <content type="html"><![CDATA[<p>Hello, It&rsquo;s <a href="http://namshi.github.io/blog/categories/techthursday/">#TechThursday</a> at <a href="http://twitter.com/techNamshi">#namshi</a>!</p>

<blockquote><p>News from the IT Team:</p>

<p>As you probably know reading our newsletter we are very interested in Docker, the open platform for distributed applications, that&rsquo;s why
<a href="http://tech.namshi.com/team/#Oluwaseun%20Obajobi">Oba</a>, <a href="http://tech.namshi.com/team/#Alessandro%20Nadalin">Alex</a> and <a href="http://tech.namshi.com/team/#Luciano%20Colosio">Lucio</a> will attend
the <a href="http://europe.dockercon.com/">Docker Europe conference in December</a></p>

<p>Have fun in the cold and grey Amsterdam guys :D</p></blockquote>

<p><strong>Here is the list with awesome links to keep you busy during the weekend::</strong></p>

<ul>
<li><p><a href="http://vimeo.com/105955605">Mary live-codes a JavaScript game from scratch </a></p></li>
<li><p><a href="http://tia.mat.br/blog/html/2014/10/06/life_of_a_http_request.html">Life of a HTTP request, as seen by my toy web server</a></p></li>
<li><p><a href="http://antirez.com/news/79">Redis cluster, no longer vaporware</a></p></li>
<li><p><a href="http://buff.ly/1sKB2ns">Passwordless authentication: Secure, simple, and fast to deploy</a></p></li>
<li><p><a href="http://buff.ly/1rukgDK">How POODLE Happened</a></p></li>
<li><p><a href="http://buff.ly/1sy0Cwc">Container Computing and AWS</a></p></li>
<li><p><a href="http://buff.ly/1xR9RYG">Google Map Tracks Your Every Move. Check Your &lsquo;Location History&rsquo; to Verify It</a></p></li>
<li><p><a href="http://buff.ly/1sJTgXC">Developer Preview of Version 3 of AWS SDK for PHP</a></p></li>
<li><p><a href="http://buff.ly/1sebUnL">HastyScribe, markdown to self-contained HTML pages</a></p></li>
<li><p><a href="http://buff.ly/1sEg4b4">AngularJS 1.3.0</a></p></li>
</ul>


<!-- more -->


<ul>
<li><p><a href="http://dendory.net/screenshots/abstraction_of_code.pdf">A study of code abstraction</a></p></li>
<li><p><a href="http://blog.ircmaxell.com/2014/10/an-open-letter-to-php-fig.html">An open letter to PHP-FIG</a></p></li>
<li><p><a href="http://kotlinlang.org/">Kotlin &ndash; Statically typed programming language targeting the JVM and JavaScript</a></p></li>
<li><p><a href="http://nodeframework.com/">Hand-picked registry of Node.js frameworks</a></p></li>
<li><p><a href="https://www.npmjs.org/package/restling">Restling: a promise based asynchronous http requests</a></p></li>
<li><p><a href="http://buff.ly/1nj1bcv">Loading webfonts with high performance on responsive websites</a></p></li>
<li><p><a href="http://buff.ly/1xGLtJe">Symfony3 upgrade guide</a></p></li>
<li><p><a href="http://buff.ly/1nhqhbV">Meteor.js: not new but better recheck :)</a></p></li>
<li><p><a href="http://buff.ly/1qG1b1s">Sharing micro-service authentication using Nginx, Passport and Redis Glozic</a></p></li>
<li><p><a href="http://buff.ly/1vZdoon">5 Programming Languages Marked for Death</a></p></li>
<li><p><a href="http://buff.ly/1sy17Xj">Amazon finally launched SSD storages for RDS</a></p></li>
<li><p><a href="http://buff.ly/1yYI10P">What does the adoption of the Blink rendering engine by the Chromium project mean for WebKit?</a></p></li>
<li><p><a href="http://www.sitepoint.com/javascript-beyond-web-2014/">All the places where you can use javascript</a></p></li>
<li><p>Comparison: <a href="https://medium.com/este-js-framework/whats-wrong-with-angular-js-97b0a787f903">what&rsquo;s wrong</a> and <a href="http://www.sitepoint.com/love-angularjs/">why I love</a> AngularJs</p></li>
<li><p><a href="https://www.datadoghq.com/2014/08/monitor-coreos-scale-datadog/">Monitor CoreOS at scale with Datadog</a></p></li>
<li><p><a href="http://swrveengineering.wordpress.com/2014/10/14/how-we-increased-our-ec2-event-throughput-by-50-for-free/">How we increased our EC2 event throughput by 50%, for free</a></p></li>
<li><p><a href="http://www.agileweboperations.com/supporting-millions-of-pretty-url-rewrites-in-nginx-with-lua-and-redis">Supporting Millions of Pretty URL Rewrites in Nginx with Lua and Redis</a></p></li>
<li><p><a href="http://www.filamentgroup.com/lab/to-picturefill.html">To Picturefill, or not to Picturefill</a></p></li>
<li><p><a href="http://www.benlesh.com/2014/09/dynamic-worker-threads-in-javascript.html">Dynamic Worker Threads In JavaScript</a></p></li>
<li><p><a href="http://www.toptal.com/angular-js/angular-js-demystifying-directives">AngularJS: Demystifying Directives</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">What the heck is the event loop anyway ?</a></p></li>
<li><p><a href="http://instagram-engineering.tumblr.com/post/97740520316/betterandroid">Building a better Instagram app for Android</a></p></li>
<li><p><a href="http://www.whitewashing.de/2014/10/14/lightweight_symfony2_controllers.html">Lightweight Symfony2 Controllers</a></p></li>
<li><p><a href="https://www.acquia.com/blog/future-php-shared-power-tools">The Future of PHP is Shared Power Tools</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletter #59]]></title>
    <link href="http://namshi.github.io/blog/2014/10/09/newsletter-number-59/"/>
    <updated>2014-10-09T11:44:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/10/09/newsletter-number-59</id>
    <content type="html"><![CDATA[<p>Hello, It&rsquo;s <a href="http://namshi.github.io/blog/categories/techthursday/">#TechThursday</a> at <a href="http://namshi.com">#namshi</a> again!</p>

<blockquote><p>News from the IT Team:
Well, not so much today, it was a short week thanks to the cool EID break :)</p></blockquote>

<p>But what has the team been looking at over the past week? Below
you&rsquo;ll find the usual list of interesting articles we discovered
in the past 7 days.</p>

<ul>
<li><p><a href="http://www.sitepoint.com/anatomy-javascript-mv-framework/">JavaScript MV* Framework compared</a></p></li>
<li><p><a href="http://gajus.com/blog/2/the-definetive-guide-to-the-javascript-generators">The Definitive Guide to the JavaScript Generators</a></p></li>
<li><p><a href="http://bit.ly/10TxPHK">Cyclomatic and NPath complexity explained</a></p></li>
<li><p><a href="http://bit.ly/1xrDuPY">Best Practices for Designing a Pragmatic RESTful API</a></p></li>
</ul>


<!-- more -->


<ul>
<li><p><a href="http://www.sitepoint.com/preparing-ecmascript-6-new-string-methods/">ECMAScript 6 new String Methods</a></p></li>
<li><p><a href="https://github.com/alexfernandez/prototypes">Interesting lib of utility function. Use with caution, it touched the prototype (as the name suggestes)</a></p></li>
<li><p><a href="https://github.com/WhichBrowser/WhichBrowser">WhichBrowser &ndash; User agent sniffing gone too far</a></p></li>
<li><p><a href="http://www.quora.com/What-are-some-things-that-programmers-and-computer-scientists-know-but-most-people-dont">Things that programmers know, but most people don&rsquo;t?</a></p></li>
<li><p><a href="http://www.slideshare.net/Kevlin/worse-is-better-for-better-or-for-worse-38743956">Worse Is Better, for Better or for Worse</a></p></li>
<li><p><a href="http://www.slideshare.net/jeharrell/9-antipatterns-for-nodejs-teams">9 anti-patterns for node.js teams</a></p></li>
<li><p><a href="https://nakedsecurity.sophos.com/2014/10/07/dubai-police-add-facial-recognition-to-google-glass/">Dubai police add facial recognition to Google Glass</a></p></li>
<li><p><a href="http://www.quora.com/How-does-a-computer-chip-work/answer/Subhasis-Das">How does a computer chip work?</a></p></li>
<li><p><a href="http://www.airpair.com/angularjs/posts/top-10-mistakes-angularjs-developers-make">Top 10 mistakes AngularJS developers make</a></p></li>
<li><p><a href="https://speakerdeck.com/ubermuda/a-multi-container-symfony2-setup-with-docker">A multi-container Symfony2 setup with Docker</a></p></li>
<li><p><a href="http://buff.ly/1ndfRKh">Move Fast and Break Nothing</a></p></li>
<li><p><a href="http://buff.ly/1vOKash">New in Symfony 2.6: Security component improvements</a></p></li>
<li><p><a href="http://buff.ly/1vKUXni">Nightmare.js, a high level wrapper for phantomJS</a></p></li>
<li><p><a href="http://buff.ly/1xjPkvB">A Symfony bundle for providing Rate Limiting for your APIs</a></p></li>
<li><p><a href="http://buff.ly/1s72YSL">awesome shell</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=X6y-OyMPqfw">Design How Your Objects Talk Through Mocking</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=PSGEjv3Tqo0">The Better Parts, the new talk by Douglas Crockford. Mind blowing, not just for Js, about programming in general</a></p></li>
<li><p><a href="https://speakerdeck.com/jaytaph/the-new-features-of-php-5-dot-6-webinar">PHP 5.6 new features</a></p></li>
<li><p><a href="http://venturebeat.com/2014/10/06/the-cookie-is-dead-heres-how-facebook-google-and-apple-are-tracking-you-now/">The cookie is dead. Here’s how Facebook, Google, and Apple are tracking you now</a></p></li>
<li><p><a href="http://codon.com/refactoring-ruby-with-monads">Refactoring Ruby with Monads</a></p></li>
<li><p><a href="http://robots.thoughtbot.com/a-tmux-crash-course">A tmux Crash Course</a></p></li>
<li><p><a href="http://zachholman.com/talk/move-fast-break-nothing/">Move Fast and Break Nothing</a></p></li>
<li><p><a href="https://blog.twitter.com/2014/push-our-limits-reliability-testing-at-twitter">Push our limits &ndash; reliability testing at Twitter</a></p></li>
<li><p><a href="http://symfony.com/blog/new-in-symfony-2-6-bootstrap-form-theme">New in Symfony 2.6: Bootstrap form theme</a></p></li>
<li><p><a href="http://symfony.com/blog/new-in-symfony-2-6-simpler-security-voters">New in Symfony 2.6: Simpler Security Voters</a></p></li>
<li><p><a href="https://github.com/dannyvankooten/AltoRouter">AltoRouter, simple PHP router inspired by Sinatra</a></p></li>
<li><p><a href="https://medium.com/aws-activate-startup-blog/a-better-dev-test-experience-docker-and-aws-291da5ab1238">A Better Dev/Test Experience: Docker and AWS</a></p></li>
<li><p><a href="http://www.calazan.com/docker-cleanup-commands/">Docker Cleanup Commands</a></p></li>
<li><p><a href="http://geoffrey.io/a-php-development-environment-with-docker.html">A PHP development environment with Docker</a></p></li>
<li><p><a href="http://www.slideshare.net/PuppetLabs/tag/puppetconf-2014">PuppetConf 2014 slides</a></p></li>
<li><p><a href="https://github.com/airbnb/zonify">Zonify is a set of command line tools for managing Route53 DNS for an AWS infrastructure</a></p></li>
<li><p><a href="https://practicingruby.com/articles/infrastructure-automation">Infrastructure automation by example</a></p></li>
<li><p><a href="http://totems.co/blog/machine-learning-nodejs-gender-instagram/">Using Machine Learning and NodeJS to detect the gender of Instagram Users</a></p></li>
<li><p><a href="http://tylergaw.com/articles/building-osx-apps-with-js">Building OS X Apps with JavaScript</a></p></li>
<li><p><a href="http://www.cs.bham.ac.uk/~exr/lectures/opsys/10_11/lectures/os-dev.pdf">Writing a Simple Operating System from Scratch</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletter #58]]></title>
    <link href="http://namshi.github.io/blog/2014/10/02/newsletter-number-58/"/>
    <updated>2014-10-02T13:27:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/10/02/newsletter-number-58</id>
    <content type="html"><![CDATA[<p>Hello, It&rsquo;s <a href="http://namshi.github.io/blog/categories/techthursday/">#TechThursday</a> at <a href="http://namshi.com">#namshi</a> again!</p>

<blockquote><p>News from the IT Team:</p>

<p>Our fella Hallal is back from <a href="http://london2014.live.symfony.com">Symfony Live London</a> and he wrote a <a href="http://tech.namshi.com/blog/2014/10/02/what-went-down-at-symfonylive-london/">nice recap</a>, go and check it out.</p></blockquote>

<p>But what has the team been looking at over the past week? Below
you&rsquo;ll find the usual list of interesting articles we discovered
in the past 7 days.</p>

<ul>
<li><p><a href="http://www.centurylinklabs.com/docker-filesystem-persistence-with-flocker/">Docker Filesystem Persistence With Flocker</a></p></li>
<li><p><a href="http://www.ansible.com/blog/official-ansible-content-on-docker-hub">Official Ansible Content on Docker Hub</a></p></li>
<li><p><a href="http://www.youtube.com/watch?v=U4oB28ksiIo&amp;feature=youtu.be">What happens when you steal a hackers computer</a></p></li>
<li><p><a href="https://blog.cloudflare.com/introducing-universal-ssl/">Introducing Universal SSL</a></p></li>
</ul>


<!-- more -->


<ul>
<li><p><a href="https://www.loggly.com/blog/five-things-every-developer-know-syslog/">Five Things Every Developer Should Know About Syslog</a></p></li>
<li><p><a href="https://blog.cloudflare.com/keyless-ssl-the-nitty-gritty-technical-details/">Keyless SSL: The Nitty Gritty Technical Details</a></p></li>
<li><p><a href="https://www.joyent.com/developers/node/design">Node.js Best Practices</a></p></li>
<li><p><a href="http://mywiki.wooledge.org/FtpMustDie#preview">FTP Must Die</a></p></li>
<li><p><a href="http://www-users.cs.york.ac.uk/susan/joke/cpp.htm">Stroustrup C++ &lsquo;interview&rsquo;</a></p></li>
<li><p><a href="http://kartar.net/2014/09/when-logstash-and-syslog-go-wrong/">When Logstash and Syslog go wrong</a></p></li>
<li><p><a href="http://blog.thestateofme.com/2014/09/12/docker-networking/">Docker Networking</a></p></li>
<li><p><a href="https://practicingruby.com/articles/infrastructure-automation">Infrastructure automation by example</a></p></li>
<li><p><a href="http://cwebber.net/blog/2014/09/26/i-am-not-a-coder/">I Am Not a Coder</a></p></li>
<li><p><a href="https://kobra.io">Collaborative &ldquo;Google Docs&rdquo; for code</a></p></li>
<li><p><a href="http://paypal.github.io/nemo/">PayPal’s open source node.js automation framework</a></p></li>
<li><p><a href="https://github.com/angular/material">Material Design for AngularJS Apps</a></p></li>
<li><p><a href="http://www.centurylinklabs.com/simple-introduction-to-coreos-with-ceo-alex-polvi-and-cto-brandon-philips/">Simple Introduction to CoreOS</a></p></li>
<li><p><a href="https://github.com/winebarrel/roadworker">Roadworker is a tool to manage Route53</a></p></li>
<li><p><a href="http://mysqlhighavailability.com/mysql-group-replication-hello-world/">MySQL High Availability</a></p></li>
<li><p><a href="http://wiert.me/2014/04/08/venn-diagrams-of-sql-join-queries-via-data-visualization-google/">Venn Diagrams of SQL Join queries </a></p></li>
<li><p><a href="https://github.com/kasperisager/fig-phpstack">Fig managed docker PHP stack</a></p></li>
<li><p><a href="http://www.brightball.com/devops/docker-is-the-heroku-killer">Docker is the heroku killer</a></p></li>
<li><p><a href="http://blog.learningbyshipping.com/2014/09/25/beauty-of-testing/">Beauty of Testing</a></p></li>
<li><p><a href="http://buytaert.net/scaling-open-source-communities">Scaling Open Source communities</a></p></li>
<li><p><a href="https://speakerdeck.com/tammielis/a-tale-of-sass-in-an-open-source-world">A tale of Sass in an open source world</a></p></li>
<li><p><a href="https://github.com/osscafe/gulp-cheatsheet">A quite useful Gulp.js cheat sheet</a></p></li>
<li><p><a href="https://medium.com/@lucasalvini/on-organizing-conferences-a3737ad195a3">On organising conferences</a></p></li>
<li><p><a href="http://www.businessinsider.com/10-things-in-tech-you-need-to-know-today-october-1-2014-9">10 Things In Tech You Need To Know Today</a></p></li>
<li><p><a href="http://www.troyhunt.com/2014/09/everything-you-need-to-know-about.html">Everything you need to know about the Shellshock Bash bug</a></p></li>
<li><p><a href="http://philipwalton.com/articles/what-no-one-told-you-about-z-index/">What no one told you about z-index</a></p></li>
<li><p><a href="https://github.com/faif/python-patterns">Python design patterns</a></p></li>
<li><p><a href="https://www.joyent.com/developers/node/design">Nodejs best practices by Joyen</a></p></li>
<li><p><a href="http://www.slideshare.net/gummyindustries/why-is-a-blizzard-s-a-gamer-a-better-manager-than-you">Why is a Blizzard &rsquo;s gamer a better manager than you?</a></p></li>
<li><p><a href="http://method.ac/">Design for programmers</a></p></li>
<li><p><a href="http://addyosmani.com/blog/fixmyjs/">Automatically fix all the JavaScript linting errors</a></p></li>
<li><p><a href="http://tylergaw.com/articles/building-osx-apps-with-js">Building OSX Apps With JavaScript</a></p></li>
<li><p><a href="https://www.igvita.com/2013/12/16/optimizing-nginx-tls-time-to-first-byte/">Optimizing nginx tls time to first byte</a></p></li>
<li><p><a href="http://blnight.github.io/ngMario/">Learn AngularJS by Playing Mario</a></p></li>
<li><p><a href="http://mtdowling.com/blog/2014/09/28/guzzle-ring/">Guzzle-Ring and Future Responses</a></p></li>
<li><p><a href="https://wiki.php.net/rfc/remove_alternative_php_tags#vote">RFC to remove alternative PHP tags accepted for PHP 7</a></p></li>
<li><p><a href="https://blog.cloudflare.com/inside-shellshock/">Inside Shellshock: How hackers are using it to exploit systems</a></p></li>
<li><p><a href="http://symfony.com/blog/new-in-symfony-2-6-security-component-improvements">New in Symfony 2.6: Security component improvements</a></p></li>
<li><p><a href="http://symfony.com/blog/new-in-symfony-2-6-improvements-for-the-translation-component">New in Symfony 2.6: Improvements for the Translation component</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What went down at SymfonyLive London?]]></title>
    <link href="http://namshi.github.io/blog/2014/10/02/what-went-down-at-symfonylive-london/"/>
    <updated>2014-10-02T12:26:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/10/02/what-went-down-at-symfonylive-london</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://namshi.github.io/images/symfonylive.png" width="640" height="640" title="SymfonyLive" alt="SymfonyLive">
SymfonyLive London 2014 concluded with top-notch presentations from Symfony and industry gurus. It was an exceptional
opportunity being able to attend this conference and meet those people.</p>

<p>Here is my summary about some of the talks I had the chance to attend:</p>

<!-- more -->


<h2>Keynote: Understanding Craftsmanship by <a href="https://twitter.com/_md">Marcello Duarte</a></h2>

<p>Marcello delivered an outstanding keynote presentation on achieving craftsmanship in software.
He provided a walk through the <a href="http://manifesto.softwarecraftsmanship.org/">Software Craftsmanship Manifesto</a>
and how the Agile methodology should have been evolved to consider software craftsmanship as one of its practices.</p>

<p>The talk focused on:</p>

<ul>
<li>Delivering a well crafted software by following good practices such as clean code</li>
<li>Being steadfast by considering yourself a craftsman rather than an executionar</li>
<li>Focusing on the community by having mentors and supporting other programmers</li>
<li>Enhancing productivity by dealing with customers as partners who understand your passion and approach
in delivering code rather than focusing on completing tasks</li>
</ul>


<iframe src="http://namshi.github.io//www.slideshare.net/slideshow/embed_code/39722355" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/marcello.duarte/understanding-craftsmanship" title="Understanding craftsmanship" target="_blank">Understanding craftsmanship</a> </strong> from <strong><a href="http://www.slideshare.net/marcello.duarte" target="_blank">Marcello Duarte</a></strong> </div></p>

<h2>The dependency Trap by <a href="https://twitter.com/jakub_zalas">Jakub Zalas</a></h2>

<p>Jakub explained how bad it can be having a number of services depend on one external service and at a certain point,
when that external service needs to be replaced, you fall into what is called &lsquo;The Dependency Trap&rsquo; due
to high coupling.</p>

<p>The approach to follow in order to avoid such situations is to work on making internal services
loosely coupled from external ones by introducing interfaces and &lsquo;Dependency Inversion&rsquo;. The guidelines
of the Dependency Inversion principal are:</p>

<ul>
<li>High level modules (your services) should not depend on low level ones (libraries) instead, they should
depend on abstractions. In other words, both your services and the library should depend on interfaces that clearly
describe what they are expected to accomplish.</li>
<li>Abstractions should not depend on details. This means that your interface should not be a detail in a possible
more generic interface.</li>
</ul>


<p>Here at Namshi, we are introducing these practices, and as a starting point, we are loosely coupling our services from doctrine. It is
amazing to notice that we are on the right track and addressing industry wide issues!</p>

<h2>The Naked Bundle by <a href="https://twitter.com/matthiasnoback">Matthias Noback</a></h2>

<p>This was one of the most contreversial talks at the confrence! Matthias&rsquo;s goal through this talk was to motivate the symfony
community to start considering the fact that one day, they will be faced with a situation where they have to port their
code to a different framework. Motivated by that fact, he started exploring ways that allow a Symfony2 based codebase to be easily portable
to other frameworks and thus, depend less on the Symfony2 framework itself. Now the good part is that most of Symfony is based on components, however,
Bundles are not. He moves on by trying to introduce workarounds for controllers, entities and templates to reside outside the bundle and create the
&lsquo;Naked Bundle&rsquo;.</p>

<h2>Sylius e-commerce for symfony2 developers by Pawel Jedrzejewski</h2>

<p>A walk through Sylius, a powerful Symfony2 based E-commerce platform. Pawel explained how to start with Sylius, the available
bundles and components it introduces and how it can be used in non-Symfony codebase.</p>

<h2>Decoupling with design patterns and symfony DIC by <a href="https://twitter.com/everzet">Konstantin Kudryashov (everzet)</a></h2>

<p>One of the best presentations that took place at SymfonyLive, Everzet just rocked it! He introduced the techniques he
followed in building Behat v.3. His main goal was to try and deliver the most extensible test framework while
maintaining backword compatibility. He used these goals and techniques as examples on how Symfony2 based projects
should be built.</p>

<p>The main guidelines to achieve decoupling, extensibilty and backword compatibility are to:</p>

<ul>
<li>Avoid premature abstractions.</li>
<li>Close your code for any extensions (by using private attributes and final classes, for example).</li>
<li>When a use case that requires opening up a class or an attribute rises, identify a proper extension point and put lots of thought in it.</li>
<li>Whenever opening up a class or an attribute, keep in mind backward compatibility.</li>
<li>Utilize the Gang of Four design patterns wherever needed!</li>
</ul>


<p>In case of Behat, achieving the framework design goals was done by leveraging compiler passes as extension points and
using Delegation Loop, Decorator, Observer, Compsite, Chain of Responsibility and Adapter patterns. Each pattern was
used wherever necessary, for example, the Adapther pattern achieved the goal of backword compatibility by executing the
required transformation on legacy input and &lsquo;adapt&rsquo; it to the new one.</p>

<p>Basically, the solution to a desing problem must reside in one of the design patterns in the Gang of Four!</p>

<iframe src="http://namshi.github.io//www.slideshare.net/slideshow/embed_code/39591398" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/everzet/decoupling-with-design-patterns-and-symfony2-dic" title="Decoupling with Design Patterns and Symfony2 DIC" target="_blank">Decoupling with Design Patterns and Symfony2 DIC</a> </strong> from <strong><a href="http://www.slideshare.net/everzet" target="_blank">Konstantin Kudryashov</a></strong> </div></p>

<h2>Keynote: Doing Everything With Nothing, Ephemeralization In The Cloud by <a href="https://twitter.com/dzuelke">David Zuelke</a></h2>

<p>A very inspiring talk by David, he walks through the history of the evolution of daily life tools and how they keep doing
more with less (Ephemeralization).
From that point onwords, he explains how this observation relates to the computing world. We see that the cloud is
evolving daily by intorducing enhancements that makes developers&#8217; life easier and making them focus on what is important to them.
Infrastructure-as-a-service (IaaS) and Platform-as-a-Service (PaaS) are examples of this evolution. He moves on by introducing heroku,
a PaaS, and how it contributes to this fact by providing out of the box system solutions to developers.</p>

<p>All in all, the talks were inspiring and addressed current issues in web development. Can&rsquo;t wait for SymfonyLive London 2015!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletter #57]]></title>
    <link href="http://namshi.github.io/blog/2014/09/25/newsletter-number-57/"/>
    <updated>2014-09-25T11:41:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/25/newsletter-number-57</id>
    <content type="html"><![CDATA[<p>Hello, It&rsquo;s <a href="http://namshi.github.io/blog/categories/techthursday/">#TechThursday</a> at <a href="http://namshi.com">#namshi</a> again!</p>

<blockquote><p>News from the IT Team:</p>

<p>Hallal has already landed in London for <a href="http://london2014.live.symfony.com">Symfony Live</a> conference and he is having a blast.
<img class="thumb left" src="http://namshi.github.io/images/mohomad-sf-live.jpg"></p>

<p>And we are back with some more proposals to the <a href="http://confoo.ca/en">Confoo</a> conference in Canada:
check, and support them by voting <a href="http://tech.namshi.com/blog/2014/09/22/coding-on-the-edge-at-confoo/">for Alex</a>,
<a href="http://tech.namshi.com/blog/2014/09/20/interested-in-the-history-of-nodejs-then-lets-hear-it-from-lucio-at-the-confoo/">for Lucio</a> and <a href="http://tech.namshi.com/blog/2014/09/20/stop-using-crons-start-listening-to-geshan/">for Geshan</a>, go team Namshi!</p></blockquote>

<p>But what has the team been looking at over the past week? Below
you&rsquo;ll find the usual list of interesting articles we discovered
in the past 7 days.</p>

<ul>
<li><p><a href="http://mnapoli.fr/decoupling-packages/">Decoupling packages</a></p></li>
<li><p><a href="https://github.com/igorw/retry">A tiny library for retrying failing operations</a></p></li>
<li><p><a href="https://github.com/recoilphp/recoil">Cooperative multitasking for PHP via co-routines</a></p></li>
<li><p><a href="http://bit.ly/1peew15">The Right Way (In computer science, everything is a trade-off)</a></p></li>
</ul>


<!-- more -->


<ul>
<li><p><a href="http://bit.ly/1rnFojIr">Docker Introduction &ndash; Slides from a Red Hat Software Engineer</a></p></li>
<li><p><a href="http://bit.ly/1ClG2ly">Doctrine filters and annotations to improve security and ease development in a Symfony app</a></p></li>
<li><p><a href="http://bit.ly/1ssxTdJ">Do Programmers Need to Be &lsquo;Masters of Their Domain&rsquo;?</a></p></li>
<li><p><a href="http://blog.npmjs.org/post/98131109725/npm-2-0-0">npm 2.0 released</a></p></li>
<li><p><a href="https://github.com/kissyteam/xtemplate">yet another javascript template language: eXtensible</a></p></li>
<li><p><a href="http://buff.ly/Y8wHhI">New in Symfony 2.6: LockHandler</a></p></li>
<li><p><a href="http://buff.ly/1umFydE">Prevent errors from breaking gulp watch</a></p></li>
<li><p><a href="http://buff.ly/1x8bO5r">CloudScale – Automatic Cloud Infrastructure Scaling</a></p></li>
<li><p><a href="http://buff.ly/1v5l3zZ">CTOs are the new PANDAs</a></p></li>
<li><p><a href="http://buff.ly/1rlSMoL">PHP: why GOTO instead of recursion?</a></p></li>
<li><p><a href="http://buff.ly/1vcJ6w5">New in Symfony 2.6: Smarter assets:install command</a></p></li>
<li><p><a href="http://buff.ly/XZAWfx">Symfony 2.6 fast approaching its stabilization phase</a></p></li>
<li><p><a href="http://buff.ly/1mz0prV">An Early Investor Offers Some Lessons From Alibaba’s Evolution</a></p></li>
<li><p><a href="http://buff.ly/1tNRLGV">One Thing Well – blog about simple, useful software</a></p></li>
<li><p><a href="http://buff.ly/1rb7vCE">Amazon SNS &ndash; Now With Enhanced Support for iOS 8</a></p></li>
<li><p><a href="http://buff.ly/1mrlPap">JavaScript Memory Management Masterclass</a></p></li>
<li><p><a href="http://buff.ly/Z2xrpM">Apple announces API that allows using JavaScript for Automation</a></p></li>
<li><p><a href="http://buff.ly/1rb0NfY">Resource management in Docker</a></p></li>
<li><p><a href="http://buff.ly/1tGyWoT">Node OS</a></p></li>
<li><p><a href="http://buff.ly/Z2v5Hq">Why I changed my mind about Node.js</a></p></li>
<li><p><a href="http://blog.enfocussolutions.com/">The Business Analyst as Explorer: An Inquiry, Not an Inquisition</a></p></li>
<li><p><a href="http://www.technologyreview.com/news/529011/can-technology-fix-medicine/">Can Technology Fix Medicine? Medical data is a hot spot for venture investing and product innovation.</a></p></li>
<li><p><a href="https://news.layervault.com/stories/33347-pdf-mobile--multidevice--design-lessons--learned-building-polar-by-luke-wroblewski">Mobile &amp; multi-device lessons learned, a free e-book by Luke Wroblewski</a></p></li>
<li><p><a href="http://erenyagdiran.github.io/I-was-just-asked-to-crack-a-program-Part-1/">&ldquo;I was just asked to crack a program in a job interview !&rdquo;</a></p></li>
<li><p><a href="http://www.youtube.com/watch?v=XCVOxht34Hs">Be a happier developer with Docker</a></p></li>
<li><p><a href="http://www.thinkful.com/learn/angularjs-tutorial-build-a-gmail-clone/Directives-Overview">Learn AngularJS by Creating a Gmail Clone</a></p></li>
<li><p><a href="http://www.html5rocks.com/en/tutorials/shapes/getting-started/">Getting Started with CSS Shapes</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design, Architecture and Code on the edge @Confoo]]></title>
    <link href="http://namshi.github.io/blog/2014/09/22/coding-on-the-edge-at-confoo/"/>
    <updated>2014-09-22T09:01:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/22/coding-on-the-edge-at-confoo</id>
    <content type="html"><![CDATA[<p>At Namshi we run a product that needs to evolve quickly and be ready to change: new features and
technologies are integrated every week to be able to keep up to date with the market and the technology around us.
That&rsquo;s how we started using nodejs, Angular, Docker, SPDY and much more&hellip;</p>

<p><strong>Do you want to hear more?</strong></p>

<!-- more -->


<p><img class="left team" src="http://namshi.github.io/images/alex.jpg">
<a href="http://tech.namshi.com/team#Alessandro%20Nadalin">Alex</a> submitted a bunch of talks to the 2015 edition of the Confoo conference, so just
<a href="http://confoo.ca/en/call-for-papers/speaker/alessandro-nadalin">vote for his talks</a>.<br>
His talks cover a wide variety of topics from Symfony, Angular, HTTP to Dockerinzing your application.</p>

<p>How cool is that?<br>
If you are looking for sharp and engaging sessions, <strong>these are definitely bound to make you sit up and notice</strong>.</p>

<br>


<br>


<br>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interested in the history of NodeJS? Then let's hear it from Lucio at the ConFoo]]></title>
    <link href="http://namshi.github.io/blog/2014/09/20/interested-in-the-history-of-nodejs-then-lets-hear-it-from-lucio-at-the-confoo/"/>
    <updated>2014-09-20T22:37:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/20/interested-in-the-history-of-nodejs-then-lets-hear-it-from-lucio-at-the-confoo</id>
    <content type="html"><![CDATA[<p>Not really hard to believe, NodeJS is a beloved one among
the plethora of technologies that we use at <a href="https://namshi.com">Namshi</a>;
that&rsquo;s why we got people like <a href="http://namshi.github.io/team#Luciano%20Colosio">Lucio</a> on board so that we
could expand in that direction.</p>

<!-- more -->


<p><img class="left team" src="http://namshi.github.io/images/lucio.jpg" title="Luciano Colosio" ></p>

<p>And you know what? Lucio loves Node so much that he&rsquo;d like
to talk about it at a big stage, like the one the
<a href="http://confoo.ca/">ConFoo</a> of next february.</p>

<p>Then don&rsquo;t miss the chance to
<a href="http://confoo.ca/en/call-for-papers/speaker/luciano-colosio">vote one of his proposals</a>
as he&rsquo;d be very happy to introduce you the history of NodeJS
(I heard part of that talk, since he already gave it internally
for the Namshi team, and I have to admit it was freaking
interesting), how it was born and what pushed
<a href="http://www.quora.com/Who-is-Ryan-Dahl">Rian Dahl</a> to write
this beautiful platform; the other talk that he has in the
pipeline is a good introduction on how to embrace the
non-blocking paradigm and he will explain how to make sure
that you treat the Event Loop responsibly :)</p>

<p>Definitely worth it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop using crons, start listening to Geshan]]></title>
    <link href="http://namshi.github.io/blog/2014/09/20/stop-using-crons-start-listening-to-geshan/"/>
    <updated>2014-09-20T12:15:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/20/stop-using-crons-start-listening-to-geshan</id>
    <content type="html"><![CDATA[<p><a href="http://namshi.github.io/team#Geshan%20Manandhar">Geshan</a> has decided
he can&rsquo;t stand seeing people struggling with
crons anymore, therefore he decided to give it a
shot at the <a href="http://confoo.ca/en/call-for-papers/speaker/geshan-manandhar">2015 edition of the confoo</a>.</p>

<!-- more -->


<p><img class="right team" src="http://namshi.github.io/images/geshan.jpg"></p>

<p>If you want to hear how Symfony integrates (so) nicely
with messaging queues and, specifically, with RabbitMQ
don&rsquo;t waste a second and <a href="http://confoo.ca/en/call-for-papers/speaker/geshan-manandhar">vote his talk</a>
so that he can get the chance to take the stage at the
canadian conference.</p>

<p>He will talk about our <strong>direct experience with RabbitMQ</strong>,
including <strong>MQ best practices</strong> and an overview of the
available tools, so that the audience will be able to
understand the theory, see how it works in practice
and form his own opinion.</p>

<p>Well done Geshan, we hope to hear how Namshi handles
gazilions of messages in Canada!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletter #56]]></title>
    <link href="http://namshi.github.io/blog/2014/09/18/newsletter-number-56/"/>
    <updated>2014-09-18T00:00:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/18/newsletter-number-56</id>
    <content type="html"><![CDATA[<p>Hello, It&rsquo;s <a href="http://namshi.github.io/blog/categories/techthursday/">#TechThursday</a> at <a href="http://namshi.com">#namshi</a> again!</p>

<blockquote><p>News from the IT Team:</p>

<p><a href="http://tech.namshi.com/team/#Mohamad%20Hallal">Hallal</a> wrote an interesting <a href="http://buff.ly/1wpoLEN">post</a> about <strong>Shisha</strong>: a nodejs library for creating smoke tests in no time.</p>

<p>We submitted some proposals to the <a href="http://confoo.ca/en">Confoo</a> conference in Canada:
check, and support them by voting <a href="http://confoo.ca/en/call-for-papers/speaker/mohamad-hallal">for Hallal</a> and <a href="http://confoo.ca/en/call-for-papers/speaker/alessandro-cinelli">for Cirpo!</a></p></blockquote>

<p>But what has the team been looking at over the past week? Below
you&rsquo;ll find the usual list of interesting articles we discovered
in the past 7 days.</p>

<ul>
<li><p><a href="http://buff.ly/YRamGD">Pants: Build system by Twitter, Foursquare, and Square</a></p></li>
<li><p><a href="http://buff.ly/YPLMWA">Push notification click-through rates</a></p></li>
<li><p><a href="http://buff.ly/1y9BVu1">Get your public IP address, uberfast</a></p></li>
<li><p><a href="http://buff.ly/ZmVSy7">The joy of make at jsconfeu</a></p></li>
<li><p><a href="http://buff.ly/1nVAllI">JavaScript and the Browser: Under the Hood</a></p></li>
</ul>


<!-- more -->


<ul>
<li><p><a href="http://buff.ly/1m1R63B">Pioneerjs: javascript integration testing</a></p></li>
<li><p><a href="http://buff.ly/Xccibb">Create an app like twitter in 300 lines of AngularJS</a></p></li>
<li><p><a href="http://buff.ly/1tMee4A">ECMAScript 6 modules: the final syntax</a></p></li>
<li><p><a href="http://buff.ly/1m1QI52">What&rsquo;s next for JavaScript &ndash; ES6 Rocks</a></p></li>
<li><p><a href="http://buff.ly/YFRhXE">Write Code Every Day</a></p></li>
<li><p><a href="http://buff.ly/1tM6pf9">Current #Redis cost is 1.5 man a month</a></p></li>
<li><p><a href="http://felixniklas.com/dimensions">A Chrome extension to measure everything </a></p></li>
<li><p><a href="http://dfir.org/">Recommended Security Reading List </a></p></li>
<li><p><a href="http://www.jetbrains.com/phpstorm/whatsnew/">PhpStorm 8 is out!</a></p></li>
<li><p><a href="http://www.youtube.com/playlist?list=PLHfLBrRzKS4rU4zt5vUyIMI77YL8wbnic">Express.js for beginners</a></p></li>
<li><p><a href="https://github.com/danielstjules/pho">Pho &ndash; BDD test framework for PHP</a></p></li>
<li><p><a href="http://www.smashingmagazine.com/2014/09/17/why-companies-need-full-time-product-managers/">Why Companies Need Full-Time Product Managers (And What They Do All Day)</a></p></li>
<li><p><a href="https://www.loggly.com/blog/what-60000-customer-searches-taught-us-about-logging-in-json/">What 60,000 Customer Searches Taught Us about Logging in JSON</a></p></li>
<li><p><a href="http://www.broken-links.com/2014/08/28/css-variables-updating-custom-properties-javascript/">CSS Variables: Access Custom Properties with JavaScript</a></p></li>
<li><p><a href="http://www.stevesouders.com/blog/2014/09/12/onload-in-onload/">&ldquo;Onload in Onload&rdquo; or “Why you should use document.readyState”</a></p></li>
<li><p><a href="http://zoompf.com/blog/2014/08/bootstrap-fonts">Speed Up Your Bootstrap and Font-Awesome Sites Using Font Compression</a></p></li>
<li><p><a href="http://www.webperformancetoday.com/2014/09/17/progressive-image-rendering-good-evil/">Progressive image rendering: Good or evil?</a></p></li>
<li><p><a href="http://williamdurand.fr/2013/08/07/ddd-with-symfony2-folder-structure-and-code-first/">DDD with Symfony2: Folder Structure And Code First</a></p></li>
<li><p><a href="http://konradpodgorski.com/blog/2014/06/23/better-way-to-work-with-assets-in-symfony-2/">A better way to work with assets in Symfony 2</a></p></li>
<li><p><a href="http://calebmadrigal.com/why-i-changed-my-mind-about-nodejs/">Why I changed my mind about NodeJs</a></p></li>
<li><p><a href="http://www.airpair.com/php/fatal-error-allowed-memory-size">Fixing PHP Fatal Error: Allowed Memory Size Exhausted</a></p></li>
<li><p><a href="http://crashworks.org/if_programming_languages_were_vehicles">If Programming Languages were Vehicles</a></p></li>
<li><p><a href="http://mohdhallal.github.io/blog/2014/09/12/handling-multiple-entity-managers-in-doctrine-the-smart-way/">Handling multiple entity managers in symfony and doctrine, the smart way</a></p></li>
<li><p><a href="http://node-os.com/">Node OS</a></p></li>
<li><p><a href="http://www.nkode.io/2014/09/12/easymysql.html">Easy MySQL with Docker</a></p></li>
<li><p><a href="https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/">Resource management in Docker</a></p></li>
<li><p><a href="http://dantehranian.wordpress.com/2014/09/08/docker-jenkins-dynamically-provisioning-sles-11-build-containers/">Docker + Jenkins: Dynamically Provisioning SLES 11 Build Containers</a></p></li>
<li><p><a href="https://redsmin.com/">All-in-one fully featured GUI for Redis</a></p></li>
<li><p><a href="https://github.com/zettio/weave/">Weave creates a virtual network that connects Docker containers deployed across multiple hosts.</a></p></li>
<li><p><a href="http://voltframework.com/">A ruby web framework where your ruby runs on both server and client</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shisha, smoke test those URLs!]]></title>
    <link href="http://namshi.github.io/blog/2014/09/17/shisha-smoke-test-those-urls/"/>
    <updated>2014-09-17T10:00:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/17/shisha-smoke-test-those-urls</id>
    <content type="html"><![CDATA[<p>Here comes Shisha! Yet another NodeJs based application from Namshi! Shisha is a smoke testing module,
what is smoke testing? Read about it <a href="http://en.wikipedia.org/wiki/Smoke_testing_(software)">here</a>.
In short, smoke testing is a term coming from Electrical Engineering, where an Electronic chip is simply tested by
plugging it into an electric source and observing if smoke comes out! How does shisha relate to this? Well,
just give shisha a list or a file of URLs and expected HTTP status code for each URL, and it will assert the expected
status codes and show you back a report! It serves as a quick and fast testing platform for your website/APIs.
Instead of waiting for a unit or an integration test to be prepared and run, simply set shisha to run on your URLs,
it is fast and simple!</p>

<!-- more -->


<h1>Install it</h1>

<p>Install shisha globally from <a href="https://www.npmjs.org/package/shisha">NPM</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g shisha</span></code></pre></td></tr></table></div></figure>


<h1>Prepare it and smoke it</h1>

<p>Create a text file named <code>.smoke</code> where all your test cases will reside.</p>

<p>Fill it as following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://example.org 200
</span><span class='line'>http://example.org/not-there 404</span></code></pre></td></tr></table></div></figure>


<p>From the directory where your <code>.smoke</code> file is, run <code>shisha</code> and observe the shisha smoking!</p>

<p>Here is a video illustration:</p>

<p><video width='640' height='640' preload='none' controls poster=''><source src='http://tech.namshi.com/videos/example.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<h1>Features</h1>

<p>You can:&ndash;</p>

<ul>
<li>Pass a path to any text file containing the right URL status code mapping using <code>--smoke</code> argument</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shisha --smoke /path/to/text/file</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Pass locals to be replaced in your text file</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shisha --domain example.org --protocol http</span></code></pre></td></tr></table></div></figure>


<p>so your text file would look something like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{{ protocol }}://{{ domain }}/path 200</span></code></pre></td></tr></table></div></figure>


<p>Here is how locals work:</p>

<p><video width='640' height='640' preload='none' controls poster=''><source src='http://tech.namshi.com/videos/locals.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<ul>
<li>Easily extend shisha in your code as follows:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install --save shisha</span></code></pre></td></tr></table></div></figure>


<p>then, in your code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var shisha = require('shisha');</span></code></pre></td></tr></table></div></figure>


<p>you will have access to the <code>smoke</code> method which accepts the following arguments:</p>

<ol>
<li>data source, which can be a path to a text file, a list or an object.</li>
<li>A list of locals to be replaced in the placeholders of the text file.</li>
<li>A callback which accepts the report argument where the set of smoking results are parsed.</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> shisha.smoke('/path/to/a/text/file', options, callback);</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shisha.smoke(
</span><span class='line'>    [
</span><span class='line'>        {
</span><span class='line'>             url: 'http://example.org',
</span><span class='line'>             status: 200
</span><span class='line'>         },
</span><span class='line'>         ...,
</span><span class='line'>         ...
</span><span class='line'>    ], locals, callback
</span><span class='line'>);</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shisha.smoke(
</span><span class='line'>    {
</span><span class='line'>        'http://example.org': 200,
</span><span class='line'>        'http://example2.org': 404,
</span><span class='line'>        ...,
</span><span class='line'>        ...
</span><span class='line'>    }, locals, callback
</span><span class='line'>);</span></code></pre></td></tr></table></div></figure>


<p><code>locals</code> as mentioned before, is a list of placeholders to be replaced in the smoke file</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shisha.smoke(urls, {protocol: 'https', domain: 'namshi.com'}</span></code></pre></td></tr></table></div></figure>


<p><code>callback</code> is a function called when smoking is done!</p>

<p>if you do not have any locals, you can simply omit it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shisha.smoke(urls, callback);</span></code></pre></td></tr></table></div></figure>


<p>Happy smoking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wanna hear about SOA and how we deal with APIs? Then vote for cirpo!]]></title>
    <link href="http://namshi.github.io/blog/2014/09/16/wanna-hear-about-soa-and-how-we-deal-with-apis-then-vote-for-cirpo/"/>
    <updated>2014-09-16T09:02:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/16/wanna-hear-about-soa-and-how-we-deal-with-apis-then-vote-for-cirpo</id>
    <content type="html"><![CDATA[<p>Aaaaand following our first announcement
regarding <a href="http://namshi.github.io/blog/2014/09/10/what-is-frontend-first-lets-hear-it-at-the-next-edition-of-the-confoo/">&ldquo;conquering&rdquo; the ConFoo</a>,
as promised, we go ahead with the second
charge!</p>

<!-- more -->


<p><img class="team right" src="http://namshi.github.io/images/cirpo.jpg"></p>

<p><a href="http://namshi.github.io/team">Cirpo</a> has decided to capitalize on
the opportunity of being in the cold lands of
Canada to offer <strong>a few</strong> learning opportunities
for the attendees, as
<a href="http://confoo.ca/en/call-for-papers/speaker/alessandro-cinelli">the list of his proposals</a>
is quite long and impressive.</p>

<p>If you are willing to hear how we do web services
and how we integrated an <strong>API-first</strong> approach then
don&rsquo;t miss the opportunity to rate his talks, as I&rsquo;m
sure he&rsquo;d be happy to showcase our best practices and
hear your feedbacks and suggestions, to make Namshi&rsquo;s
SOA even sharper; along with these topics he&rsquo;ll be
happy to talk about some of the other tools and systems
we use like Redis and RabbitMQ.</p>

<p>But even more important, <a href="http://confoo.ca/en/register">grab your ticket</a> for the
event as I can ensure you it&rsquo;s one of a kind and you won&rsquo;t
regret it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletter #55]]></title>
    <link href="http://namshi.github.io/blog/2014/09/11/newsletter-number-55/"/>
    <updated>2014-09-11T00:00:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/11/newsletter-number-55</id>
    <content type="html"><![CDATA[<p>It&rsquo;s TechThursday again!</p>

<blockquote><p>News from the IT Team:</p>

<p>In a few days <a href="http://tech.namshi.com/team/#Mohamad%20Hallal">Hallal</a> will attend <a href="http://london2014.live.symfony.com/">Symfony Live 2014 in London</a>. He also submitted
a talk, called <a href="http://frontendfirst.com/">frontend-first</a>, to <a href="http://confoo.ca">Confoo</a> &ndash; a conference that will take place in Canada on February 2015.
Please <a href="http://confoo.ca/en/call-for-papers/speaker/mohamad-hallal">vote for his talk</a> as ConFoo democratically
selects talks based on community votes.</p>

<p><a href="http://tech.namshi.com/team/#Alessandro%20Cinelli%20(cirpo)">Cirpo</a> is back from the USA, where he attended the <a href="http://2014.northeastphp.org">Northeast PHP 2014</a> conference.
He also gave a presentation called &ldquo;PHP is the king, Nodejs is the prince, Lua is the fool&rdquo;, check out the slides:</p>

<p><iframe src="http://namshi.github.io//www.slideshare.net/slideshow/embed_code/38794123" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/cirpo/newp" title="PHP is the King, nodejs is the Prince and Lua is the fool" target="_blank">PHP is the King, nodejs is the Prince and Lua is the fool</a> </strong></div></p></blockquote>

<p>But what has the team been looking at over the past week? Below
you&rsquo;ll find the usual list of interesting articles we discovered
in the past 7 days.</p>

<!-- more -->


<ul>
<li><p><a href="https://github.com/zendesk/cross-storage">Cross domain storage, an alternative di XAtuh</a></p></li>
<li><p><a href="http://jwt.io">JSON Web Tokens (JWT)</a></p></li>
<li><p><a href="https://github.com/endel/js2php">JavaScript to PHP source-to-source transpiler</a></p></li>
<li><p><a href="http://blog.risingstack.com/from-angularjs-to-react-the-isomorphic-way/">Isomorphic SPA pages</a></p></li>
<li><p><a href="http://arstechnica.com/information-technology/2014/09/how-a-new-html-element-will-make-the-web-faster/">How a new HTML element will make the Web faster</a></p></li>
<li><p><a href="http://ejohn.org/blog/write-code-every-day/">Write code everyday</a></p></li>
<li><p><a href="http://es6rocks.com/2014/08/what-is-next-for-javascript/">What is next for Javascript</a></p></li>
<li><p><a href="http://blog.teamtreehouse.com/learn-javascript">Why now is the best time to learn JavaScript</a></p></li>
<li><p><a href="http://appbaseio.github.io/twitter-appbase/">A real time twitter clone in 300 lines of AngularJS</a></p></li>
<li><p><a href="http://softwarecriollo.com/thoughts/sinatra-docker-private-github-repo">Sinatra with Docker using a private github repo</a></p></li>
<li><p><a href="https://www.digitalocean.com/company/blog/coreos-now-available-on-digitalocean/">CoreOS Now Available On DigitalOcean!</a></p></li>
<li><p><a href="http://blog.leanstack.io/how-docker-fits-into-the-current-devops-landscape">How Docker Fits Into The Current DevOps Landscape</a></p></li>
<li><p><a href="https://github.com/KryDos/JSONRulesChecker">A little library for checking JSON by rules</a></p></li>
<li><p><a href="http://pioneerjs.com">PioneerJs &ndash; A framework agnostic e2e javascript testing</a></p></li>
<li><p><a href="http://node-os.com/">node-os is the first operating system powered by npm</a></p></li>
<li><p><a href="http://justinhileman.info/article/git-pretty">How to Git Pretty: A Nice Chart on how to change Git History</a></p></li>
<li><p><a href="http://www.methodsandtools.com/archive/archive.php?id=14">Another look at incremental and iterative development</a></p></li>
<li><p><a href="http://mashable.com/2014/09/10/5-million-gmail-passwords-leak/?utm_cid=mash-com-fb-tech-link">A List of 5 Million &lsquo;Gmail Passwords&rsquo; Leaked, But There&rsquo;s No Need to Panic</a></p></li>
<li><p><a href="http://www.clypd.com/container-technology-integration-testing-with-docker">Container Technology: Integration Testing with Docker</a></p></li>
<li><p><a href="http://jlongster.com/A-Study-on-Solving-Callbacks-with-JavaScript-Generators">A Study on Solving Callbacks with JavaScript Generators</a></p></li>
<li><p><a href="http://qz.com/261181/the-hidden-structure-of-the-apple-keynote/">The hidden structure of the Apple keynote</a></p></li>
<li><p><a href="http://andrewgelman.com/2014/09/03/disagree-alan-turing-daniel-kahneman-regarding-strength-statistical-evidence/">I disagree with Alan Turing and Daniel Kahneman regarding the strength of statistical evidence</a></p></li>
<li><p><a href="https://github.com/google/cadvisor">cAdvisor &ndash; Analyzes resource usage and performance characteristics of running containers</a></p></li>
<li><p><a href="https://konklone.com/post/why-google-is-hurrying-the-web-to-kill-sha-1">Why Google is Hurrying the Web to Kill SHA-1</a></p></li>
<li><p><a href="https://blog.twitter.com/2014/push-our-limits-reliability-testing-at-twitter">Push our limits &ndash; reliability testing at Twitter</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is frontend-first? Lets hear it at the next edition of the Confoo]]></title>
    <link href="http://namshi.github.io/blog/2014/09/10/what-is-frontend-first-lets-hear-it-at-the-next-edition-of-the-confoo/"/>
    <updated>2014-09-10T00:22:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/10/what-is-frontend-first-lets-hear-it-at-the-next-edition-of-the-confoo</id>
    <content type="html"><![CDATA[<p>Just a heads up that we will have quite a few attempt
at &ldquo;conquering&rdquo; canada&rsquo;s hottest tech conference, and the
first to try is our <a href="http://namshi.github.io/team#Mohamad%20Hallal">Mohammed</a>.</p>

<!-- more -->


<p>He has submitted a talk about <a href="http://frontendfirst.com/">frontend-first</a>
and, if you&rsquo;d like to hear him or want to support
our lebanese &ldquo;rockstar&rdquo;, please <a href="http://confoo.ca/en/call-for-papers/speaker/mohamad-hallal">vote his talk</a>
as ConFoo democratically selects them based on the attendees&#8217;
&ndash; or supposed attendees &ndash; feedback.</p>

<p>He will give an overview of what <em>frontend first</em> means and
how you can focus on the surface of your apps with tools
like <a href="https://github.com/namshi/mockserver">mockserver</a>.</p>

<p>See you in Montreal? :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A bit of Namshi at the Symfony Live this month!]]></title>
    <link href="http://namshi.github.io/blog/2014/09/08/a-bit-of-namshi-at-the-symfony-live-this-month/"/>
    <updated>2014-09-08T21:41:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/08/a-bit-of-namshi-at-the-symfony-live-this-month</id>
    <content type="html"><![CDATA[<p>Pretty excited that we are going to be present
at the <a href="http://london2014.live.symfony.com/">Symfony Live</a>
which will happen at the end of this month, in London.</p>

<!-- more -->


<p><a href="http://namshi.github.io/team#mohamad%20hallal">Mohamad</a>, who has been quite
productive lately &ndash; both with <a href="http://mohdhallal.github.io/">blogging</a>
and releasing some open source libraries (like
<a href="https://github.com/namshi/mockserver">mockserver</a> and <a href="https://github.com/namshi/shisha">shisha</a>) &ndash;
has decided to take advantage of one of the bonuses that
we are offering &mdash; tickets for conferences!</p>

<p>He will have the chance to get to meet the leaders in the
PHP community in one of the most amazing conferences the
PHP panorama can offer.</p>

<p>We wish Hallal a safe trip to the United Kingdom
and we hope he&rsquo;ll have a blast learning some new stuff
and seeing a new place!</p>
]]></content>
  </entry>
  
</feed>
